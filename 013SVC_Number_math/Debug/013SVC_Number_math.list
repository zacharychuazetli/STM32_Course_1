
013SVC_Number_math.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001374  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08001504  08001504  00002504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015c0  080015c0  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  080015c0  080015c0  000025c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080015c8  080015c8  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015c8  080015c8  000025c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080015cc  080015cc  000025cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080015d0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000afc  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003d2  00000000  00000000  00003b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000148  00000000  00000000  00003f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000e3  00000000  00000000  000040a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cbe  00000000  00000000  00004183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000153b  00000000  00000000  00006e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009819  00000000  00000000  0000837c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00011b95  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c1c  00000000  00000000  00011bd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  000127f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080014ec 	.word	0x080014ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080014ec 	.word	0x080014ec

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <add_numbers>:
// 2. implement the SVC handler
// 3. in the SVC handler extract the SVC number and print it using printf
// 4. increment the SVC number by 4 and return it to the thread mode

int32_t add_numbers(int32_t x, int32_t y)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
	// goes to SVC handler and does the arithmetic
	// results come back in R0
	int32_t res;
	__asm volatile("SVC #36");
 800027a:	df24      	svc	36	@ 0x24
	__asm volatile("MOV %0,R0": "=r"(res) ::);
 800027c:	4603      	mov	r3, r0
 800027e:	60fb      	str	r3, [r7, #12]
	return res;
 8000280:	68fb      	ldr	r3, [r7, #12]
}
 8000282:	4618      	mov	r0, r3
 8000284:	3714      	adds	r7, #20
 8000286:	46bd      	mov	sp, r7
 8000288:	bc80      	pop	{r7}
 800028a:	4770      	bx	lr

0800028c <sub_numbers>:

int32_t sub_numbers(int32_t x, int32_t y)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	6039      	str	r1, [r7, #0]
	int32_t res;
	__asm volatile("SVC #37");
 8000296:	df25      	svc	37	@ 0x25
	__asm volatile("MOV %0,R0": "=r"(res) ::);
 8000298:	4603      	mov	r3, r0
 800029a:	60fb      	str	r3, [r7, #12]
	return res;
 800029c:	68fb      	ldr	r3, [r7, #12]
}
 800029e:	4618      	mov	r0, r3
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr

080002a8 <mul_numbers>:

int32_t mul_numbers(int32_t x, int32_t y)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
 80002b0:	6039      	str	r1, [r7, #0]
	int32_t res;
	__asm volatile("SVC #38");
 80002b2:	df26      	svc	38	@ 0x26
	__asm volatile("MOV %0,R0": "=r"(res) ::);
 80002b4:	4603      	mov	r3, r0
 80002b6:	60fb      	str	r3, [r7, #12]
	return res;
 80002b8:	68fb      	ldr	r3, [r7, #12]
}
 80002ba:	4618      	mov	r0, r3
 80002bc:	3714      	adds	r7, #20
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr

080002c4 <div_numbers>:

int32_t div_numbers(int32_t x, int32_t y)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b085      	sub	sp, #20
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
	int32_t res;
	__asm volatile("SVC #39");
 80002ce:	df27      	svc	39	@ 0x27
	__asm volatile("MOV %0,R0": "=r"(res) ::);
 80002d0:	4603      	mov	r3, r0
 80002d2:	60fb      	str	r3, [r7, #12]
	return res;
 80002d4:	68fb      	ldr	r3, [r7, #12]
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	3714      	adds	r7, #20
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <SVC_Handler>:

__attribute__ ((naked)) void SVC_Handler(void)
{
	// 1. get the value of the MSP, no inbuilt C function for this
	// because want to access some special register of the processor
	__asm("MRS R0,MSP");
 80002e0:	f3ef 8008 	mrs	r0, MSP
	// when branch to this function then r0 will be used as the 1st argument for the function
	// due to procedure call standard for ARM architecture
	__asm("B SVC_Handler_C");
 80002e4:	f000 b802 	b.w	80002ec <SVC_Handler_C>
}
 80002e8:	bf00      	nop
	...

080002ec <SVC_Handler_C>:

// get name from startup file
void SVC_Handler_C(uint32_t *pBaseOfStackFrame)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
	printf("in SVC handler\n");
 80002f4:	4823      	ldr	r0, [pc, #140]	@ (8000384 <SVC_Handler_C+0x98>)
 80002f6:	f000 fa9b 	bl	8000830 <puts>
	int32_t arg0, arg1, res;

	// incrementing the pointer by 6 to get PC (dereferenced already)
	// so get the actual return address
	uint8_t *pReturn_addr = (uint8_t*)pBaseOfStackFrame[6];
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	3318      	adds	r3, #24
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	61bb      	str	r3, [r7, #24]

	// 2. decrement the return address by 2 to point to opcode of the
	// SVC instruction in the program memory
	pReturn_addr -= 2;
 8000302:	69bb      	ldr	r3, [r7, #24]
 8000304:	3b02      	subs	r3, #2
 8000306:	61bb      	str	r3, [r7, #24]

	// 3. extract the SVC number (LSB of the opcode)
	// SVC number is the least significant byte
	uint8_t svc_number = *pReturn_addr;
 8000308:	69bb      	ldr	r3, [r7, #24]
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	75fb      	strb	r3, [r7, #23]
	printf("SVC number is : %d\n", svc_number);
 800030e:	7dfb      	ldrb	r3, [r7, #23]
 8000310:	4619      	mov	r1, r3
 8000312:	481d      	ldr	r0, [pc, #116]	@ (8000388 <SVC_Handler_C+0x9c>)
 8000314:	f000 fa24 	bl	8000760 <iprintf>

	arg0 = pBaseOfStackFrame[0];
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	613b      	str	r3, [r7, #16]
	arg1 = pBaseOfStackFrame[1];
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	3304      	adds	r3, #4
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	60fb      	str	r3, [r7, #12]

	switch(svc_number)
 8000326:	7dfb      	ldrb	r3, [r7, #23]
 8000328:	3b24      	subs	r3, #36	@ 0x24
 800032a:	2b03      	cmp	r3, #3
 800032c:	d820      	bhi.n	8000370 <SVC_Handler_C+0x84>
 800032e:	a201      	add	r2, pc, #4	@ (adr r2, 8000334 <SVC_Handler_C+0x48>)
 8000330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000334:	08000345 	.word	0x08000345
 8000338:	0800034f 	.word	0x0800034f
 800033c:	08000359 	.word	0x08000359
 8000340:	08000365 	.word	0x08000365
	{
	case 36:
		res = arg0 + arg1;
 8000344:	693a      	ldr	r2, [r7, #16]
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	4413      	add	r3, r2
 800034a:	61fb      	str	r3, [r7, #28]
		break;
 800034c:	e013      	b.n	8000376 <SVC_Handler_C+0x8a>
	case 37:
		res = arg0 - arg1;
 800034e:	693a      	ldr	r2, [r7, #16]
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	1ad3      	subs	r3, r2, r3
 8000354:	61fb      	str	r3, [r7, #28]
		break;
 8000356:	e00e      	b.n	8000376 <SVC_Handler_C+0x8a>
	case 38:
		res = arg0 * arg1;
 8000358:	693b      	ldr	r3, [r7, #16]
 800035a:	68fa      	ldr	r2, [r7, #12]
 800035c:	fb02 f303 	mul.w	r3, r2, r3
 8000360:	61fb      	str	r3, [r7, #28]
		break;
 8000362:	e008      	b.n	8000376 <SVC_Handler_C+0x8a>
	case 39:
		res = arg0 / arg1;
 8000364:	693a      	ldr	r2, [r7, #16]
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	fb92 f3f3 	sdiv	r3, r2, r3
 800036c:	61fb      	str	r3, [r7, #28]
		break;
 800036e:	e002      	b.n	8000376 <SVC_Handler_C+0x8a>
	default:
		printf("Invalid SVC code\n");
 8000370:	4806      	ldr	r0, [pc, #24]	@ (800038c <SVC_Handler_C+0xa0>)
 8000372:	f000 fa5d 	bl	8000830 <puts>
	}

	// return the result
	pBaseOfStackFrame[0] = res;
 8000376:	69fa      	ldr	r2, [r7, #28]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	601a      	str	r2, [r3, #0]
}
 800037c:	bf00      	nop
 800037e:	3720      	adds	r7, #32
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	08001504 	.word	0x08001504
 8000388:	08001514 	.word	0x08001514
 800038c:	08001528 	.word	0x08001528

08000390 <main>:

int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
	int32_t res;
	res = add_numbers(40, -90);
 8000396:	f06f 0159 	mvn.w	r1, #89	@ 0x59
 800039a:	2028      	movs	r0, #40	@ 0x28
 800039c:	f7ff ff68 	bl	8000270 <add_numbers>
 80003a0:	6078      	str	r0, [r7, #4]
	printf("Add result = %ld\n", res);
 80003a2:	6879      	ldr	r1, [r7, #4]
 80003a4:	4811      	ldr	r0, [pc, #68]	@ (80003ec <main+0x5c>)
 80003a6:	f000 f9db 	bl	8000760 <iprintf>

	res = sub_numbers(25, 150);
 80003aa:	2196      	movs	r1, #150	@ 0x96
 80003ac:	2019      	movs	r0, #25
 80003ae:	f7ff ff6d 	bl	800028c <sub_numbers>
 80003b2:	6078      	str	r0, [r7, #4]
	printf("Sub result = %ld\n", res);
 80003b4:	6879      	ldr	r1, [r7, #4]
 80003b6:	480e      	ldr	r0, [pc, #56]	@ (80003f0 <main+0x60>)
 80003b8:	f000 f9d2 	bl	8000760 <iprintf>

	res = mul_numbers(374, 890);
 80003bc:	f240 317a 	movw	r1, #890	@ 0x37a
 80003c0:	f44f 70bb 	mov.w	r0, #374	@ 0x176
 80003c4:	f7ff ff70 	bl	80002a8 <mul_numbers>
 80003c8:	6078      	str	r0, [r7, #4]
	printf("Mul result = %ld\n", res);
 80003ca:	6879      	ldr	r1, [r7, #4]
 80003cc:	4809      	ldr	r0, [pc, #36]	@ (80003f4 <main+0x64>)
 80003ce:	f000 f9c7 	bl	8000760 <iprintf>

	res = div_numbers(67, -3);
 80003d2:	f06f 0102 	mvn.w	r1, #2
 80003d6:	2043      	movs	r0, #67	@ 0x43
 80003d8:	f7ff ff74 	bl	80002c4 <div_numbers>
 80003dc:	6078      	str	r0, [r7, #4]
	printf("Div result = %ld\n", res);
 80003de:	6879      	ldr	r1, [r7, #4]
 80003e0:	4805      	ldr	r0, [pc, #20]	@ (80003f8 <main+0x68>)
 80003e2:	f000 f9bd 	bl	8000760 <iprintf>

	for(;;);
 80003e6:	bf00      	nop
 80003e8:	e7fd      	b.n	80003e6 <main+0x56>
 80003ea:	bf00      	nop
 80003ec:	0800153c 	.word	0x0800153c
 80003f0:	08001550 	.word	0x08001550
 80003f4:	08001564 	.word	0x08001564
 80003f8:	08001578 	.word	0x08001578

080003fc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000406:	4b0e      	ldr	r3, [pc, #56]	@ (8000440 <ITM_SendChar+0x44>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a0d      	ldr	r2, [pc, #52]	@ (8000440 <ITM_SendChar+0x44>)
 800040c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000410:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000412:	4b0c      	ldr	r3, [pc, #48]	@ (8000444 <ITM_SendChar+0x48>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a0b      	ldr	r2, [pc, #44]	@ (8000444 <ITM_SendChar+0x48>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800041e:	bf00      	nop
 8000420:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f003 0301 	and.w	r3, r3, #1
 800042a:	2b00      	cmp	r3, #0
 800042c:	d0f8      	beq.n	8000420 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800042e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	6013      	str	r3, [r2, #0]
}
 8000436:	bf00      	nop
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr
 8000440:	e000edfc 	.word	0xe000edfc
 8000444:	e0000e00 	.word	0xe0000e00

08000448 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b086      	sub	sp, #24
 800044c:	af00      	add	r7, sp, #0
 800044e:	60f8      	str	r0, [r7, #12]
 8000450:	60b9      	str	r1, [r7, #8]
 8000452:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000454:	2300      	movs	r3, #0
 8000456:	617b      	str	r3, [r7, #20]
 8000458:	e00a      	b.n	8000470 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800045a:	f3af 8000 	nop.w
 800045e:	4601      	mov	r1, r0
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	1c5a      	adds	r2, r3, #1
 8000464:	60ba      	str	r2, [r7, #8]
 8000466:	b2ca      	uxtb	r2, r1
 8000468:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800046a:	697b      	ldr	r3, [r7, #20]
 800046c:	3301      	adds	r3, #1
 800046e:	617b      	str	r3, [r7, #20]
 8000470:	697a      	ldr	r2, [r7, #20]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	429a      	cmp	r2, r3
 8000476:	dbf0      	blt.n	800045a <_read+0x12>
  }

  return len;
 8000478:	687b      	ldr	r3, [r7, #4]
}
 800047a:	4618      	mov	r0, r3
 800047c:	3718      	adds	r7, #24
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b086      	sub	sp, #24
 8000486:	af00      	add	r7, sp, #0
 8000488:	60f8      	str	r0, [r7, #12]
 800048a:	60b9      	str	r1, [r7, #8]
 800048c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800048e:	2300      	movs	r3, #0
 8000490:	617b      	str	r3, [r7, #20]
 8000492:	e009      	b.n	80004a8 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	1c5a      	adds	r2, r3, #1
 8000498:	60ba      	str	r2, [r7, #8]
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff ffad 	bl	80003fc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004a2:	697b      	ldr	r3, [r7, #20]
 80004a4:	3301      	adds	r3, #1
 80004a6:	617b      	str	r3, [r7, #20]
 80004a8:	697a      	ldr	r2, [r7, #20]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	429a      	cmp	r2, r3
 80004ae:	dbf1      	blt.n	8000494 <_write+0x12>
  }
  return len;
 80004b0:	687b      	ldr	r3, [r7, #4]
}
 80004b2:	4618      	mov	r0, r3
 80004b4:	3718      	adds	r7, #24
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}

080004ba <_close>:

int _close(int file)
{
 80004ba:	b480      	push	{r7}
 80004bc:	b083      	sub	sp, #12
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004c6:	4618      	mov	r0, r3
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004e0:	605a      	str	r2, [r3, #4]
  return 0;
 80004e2:	2300      	movs	r3, #0
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr

080004ee <_isatty>:

int _isatty(int file)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004f6:	2301      	movs	r3, #1
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr

08000502 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000502:	b480      	push	{r7}
 8000504:	b085      	sub	sp, #20
 8000506:	af00      	add	r7, sp, #0
 8000508:	60f8      	str	r0, [r7, #12]
 800050a:	60b9      	str	r1, [r7, #8]
 800050c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800050e:	2300      	movs	r3, #0
}
 8000510:	4618      	mov	r0, r3
 8000512:	3714      	adds	r7, #20
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr
	...

0800051c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b086      	sub	sp, #24
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000524:	4a14      	ldr	r2, [pc, #80]	@ (8000578 <_sbrk+0x5c>)
 8000526:	4b15      	ldr	r3, [pc, #84]	@ (800057c <_sbrk+0x60>)
 8000528:	1ad3      	subs	r3, r2, r3
 800052a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000530:	4b13      	ldr	r3, [pc, #76]	@ (8000580 <_sbrk+0x64>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d102      	bne.n	800053e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000538:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <_sbrk+0x64>)
 800053a:	4a12      	ldr	r2, [pc, #72]	@ (8000584 <_sbrk+0x68>)
 800053c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800053e:	4b10      	ldr	r3, [pc, #64]	@ (8000580 <_sbrk+0x64>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4413      	add	r3, r2
 8000546:	693a      	ldr	r2, [r7, #16]
 8000548:	429a      	cmp	r2, r3
 800054a:	d207      	bcs.n	800055c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800054c:	f000 fa9e 	bl	8000a8c <__errno>
 8000550:	4603      	mov	r3, r0
 8000552:	220c      	movs	r2, #12
 8000554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000556:	f04f 33ff 	mov.w	r3, #4294967295
 800055a:	e009      	b.n	8000570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800055c:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <_sbrk+0x64>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000562:	4b07      	ldr	r3, [pc, #28]	@ (8000580 <_sbrk+0x64>)
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4413      	add	r3, r2
 800056a:	4a05      	ldr	r2, [pc, #20]	@ (8000580 <_sbrk+0x64>)
 800056c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800056e:	68fb      	ldr	r3, [r7, #12]
}
 8000570:	4618      	mov	r0, r3
 8000572:	3718      	adds	r7, #24
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	20020000 	.word	0x20020000
 800057c:	00000400 	.word	0x00000400
 8000580:	20000078 	.word	0x20000078
 8000584:	200001c8 	.word	0x200001c8

08000588 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000588:	480d      	ldr	r0, [pc, #52]	@ (80005c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800058a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800058c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000590:	480c      	ldr	r0, [pc, #48]	@ (80005c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000592:	490d      	ldr	r1, [pc, #52]	@ (80005c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000594:	4a0d      	ldr	r2, [pc, #52]	@ (80005cc <LoopForever+0xe>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000598:	e002      	b.n	80005a0 <LoopCopyDataInit>

0800059a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800059c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059e:	3304      	adds	r3, #4

080005a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a4:	d3f9      	bcc.n	800059a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a6:	4a0a      	ldr	r2, [pc, #40]	@ (80005d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a8:	4c0a      	ldr	r4, [pc, #40]	@ (80005d4 <LoopForever+0x16>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ac:	e001      	b.n	80005b2 <LoopFillZerobss>

080005ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b0:	3204      	adds	r2, #4

080005b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b4:	d3fb      	bcc.n	80005ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005b6:	f000 fa6f 	bl	8000a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ba:	f7ff fee9 	bl	8000390 <main>

080005be <LoopForever>:

LoopForever:
  b LoopForever
 80005be:	e7fe      	b.n	80005be <LoopForever>
  ldr   r0, =_estack
 80005c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005cc:	080015d0 	.word	0x080015d0
  ldr r2, =_sbss
 80005d0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005d4:	200001c8 	.word	0x200001c8

080005d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d8:	e7fe      	b.n	80005d8 <ADC_IRQHandler>
	...

080005dc <std>:
 80005dc:	2300      	movs	r3, #0
 80005de:	b510      	push	{r4, lr}
 80005e0:	4604      	mov	r4, r0
 80005e2:	e9c0 3300 	strd	r3, r3, [r0]
 80005e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80005ea:	6083      	str	r3, [r0, #8]
 80005ec:	8181      	strh	r1, [r0, #12]
 80005ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80005f0:	81c2      	strh	r2, [r0, #14]
 80005f2:	6183      	str	r3, [r0, #24]
 80005f4:	4619      	mov	r1, r3
 80005f6:	2208      	movs	r2, #8
 80005f8:	305c      	adds	r0, #92	@ 0x5c
 80005fa:	f000 f9f9 	bl	80009f0 <memset>
 80005fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000634 <std+0x58>)
 8000600:	6263      	str	r3, [r4, #36]	@ 0x24
 8000602:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <std+0x5c>)
 8000604:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000606:	4b0d      	ldr	r3, [pc, #52]	@ (800063c <std+0x60>)
 8000608:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800060a:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <std+0x64>)
 800060c:	6323      	str	r3, [r4, #48]	@ 0x30
 800060e:	4b0d      	ldr	r3, [pc, #52]	@ (8000644 <std+0x68>)
 8000610:	6224      	str	r4, [r4, #32]
 8000612:	429c      	cmp	r4, r3
 8000614:	d006      	beq.n	8000624 <std+0x48>
 8000616:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800061a:	4294      	cmp	r4, r2
 800061c:	d002      	beq.n	8000624 <std+0x48>
 800061e:	33d0      	adds	r3, #208	@ 0xd0
 8000620:	429c      	cmp	r4, r3
 8000622:	d105      	bne.n	8000630 <std+0x54>
 8000624:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800062c:	f000 ba58 	b.w	8000ae0 <__retarget_lock_init_recursive>
 8000630:	bd10      	pop	{r4, pc}
 8000632:	bf00      	nop
 8000634:	08000841 	.word	0x08000841
 8000638:	08000863 	.word	0x08000863
 800063c:	0800089b 	.word	0x0800089b
 8000640:	080008bf 	.word	0x080008bf
 8000644:	2000007c 	.word	0x2000007c

08000648 <stdio_exit_handler>:
 8000648:	4a02      	ldr	r2, [pc, #8]	@ (8000654 <stdio_exit_handler+0xc>)
 800064a:	4903      	ldr	r1, [pc, #12]	@ (8000658 <stdio_exit_handler+0x10>)
 800064c:	4803      	ldr	r0, [pc, #12]	@ (800065c <stdio_exit_handler+0x14>)
 800064e:	f000 b869 	b.w	8000724 <_fwalk_sglue>
 8000652:	bf00      	nop
 8000654:	20000000 	.word	0x20000000
 8000658:	08001375 	.word	0x08001375
 800065c:	20000010 	.word	0x20000010

08000660 <cleanup_stdio>:
 8000660:	6841      	ldr	r1, [r0, #4]
 8000662:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <cleanup_stdio+0x34>)
 8000664:	4299      	cmp	r1, r3
 8000666:	b510      	push	{r4, lr}
 8000668:	4604      	mov	r4, r0
 800066a:	d001      	beq.n	8000670 <cleanup_stdio+0x10>
 800066c:	f000 fe82 	bl	8001374 <_fflush_r>
 8000670:	68a1      	ldr	r1, [r4, #8]
 8000672:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <cleanup_stdio+0x38>)
 8000674:	4299      	cmp	r1, r3
 8000676:	d002      	beq.n	800067e <cleanup_stdio+0x1e>
 8000678:	4620      	mov	r0, r4
 800067a:	f000 fe7b 	bl	8001374 <_fflush_r>
 800067e:	68e1      	ldr	r1, [r4, #12]
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <cleanup_stdio+0x3c>)
 8000682:	4299      	cmp	r1, r3
 8000684:	d004      	beq.n	8000690 <cleanup_stdio+0x30>
 8000686:	4620      	mov	r0, r4
 8000688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800068c:	f000 be72 	b.w	8001374 <_fflush_r>
 8000690:	bd10      	pop	{r4, pc}
 8000692:	bf00      	nop
 8000694:	2000007c 	.word	0x2000007c
 8000698:	200000e4 	.word	0x200000e4
 800069c:	2000014c 	.word	0x2000014c

080006a0 <global_stdio_init.part.0>:
 80006a0:	b510      	push	{r4, lr}
 80006a2:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <global_stdio_init.part.0+0x30>)
 80006a4:	4c0b      	ldr	r4, [pc, #44]	@ (80006d4 <global_stdio_init.part.0+0x34>)
 80006a6:	4a0c      	ldr	r2, [pc, #48]	@ (80006d8 <global_stdio_init.part.0+0x38>)
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	4620      	mov	r0, r4
 80006ac:	2200      	movs	r2, #0
 80006ae:	2104      	movs	r1, #4
 80006b0:	f7ff ff94 	bl	80005dc <std>
 80006b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80006b8:	2201      	movs	r2, #1
 80006ba:	2109      	movs	r1, #9
 80006bc:	f7ff ff8e 	bl	80005dc <std>
 80006c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80006c4:	2202      	movs	r2, #2
 80006c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006ca:	2112      	movs	r1, #18
 80006cc:	f7ff bf86 	b.w	80005dc <std>
 80006d0:	200001b4 	.word	0x200001b4
 80006d4:	2000007c 	.word	0x2000007c
 80006d8:	08000649 	.word	0x08000649

080006dc <__sfp_lock_acquire>:
 80006dc:	4801      	ldr	r0, [pc, #4]	@ (80006e4 <__sfp_lock_acquire+0x8>)
 80006de:	f000 ba00 	b.w	8000ae2 <__retarget_lock_acquire_recursive>
 80006e2:	bf00      	nop
 80006e4:	200001bd 	.word	0x200001bd

080006e8 <__sfp_lock_release>:
 80006e8:	4801      	ldr	r0, [pc, #4]	@ (80006f0 <__sfp_lock_release+0x8>)
 80006ea:	f000 b9fb 	b.w	8000ae4 <__retarget_lock_release_recursive>
 80006ee:	bf00      	nop
 80006f0:	200001bd 	.word	0x200001bd

080006f4 <__sinit>:
 80006f4:	b510      	push	{r4, lr}
 80006f6:	4604      	mov	r4, r0
 80006f8:	f7ff fff0 	bl	80006dc <__sfp_lock_acquire>
 80006fc:	6a23      	ldr	r3, [r4, #32]
 80006fe:	b11b      	cbz	r3, 8000708 <__sinit+0x14>
 8000700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000704:	f7ff bff0 	b.w	80006e8 <__sfp_lock_release>
 8000708:	4b04      	ldr	r3, [pc, #16]	@ (800071c <__sinit+0x28>)
 800070a:	6223      	str	r3, [r4, #32]
 800070c:	4b04      	ldr	r3, [pc, #16]	@ (8000720 <__sinit+0x2c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1f5      	bne.n	8000700 <__sinit+0xc>
 8000714:	f7ff ffc4 	bl	80006a0 <global_stdio_init.part.0>
 8000718:	e7f2      	b.n	8000700 <__sinit+0xc>
 800071a:	bf00      	nop
 800071c:	08000661 	.word	0x08000661
 8000720:	200001b4 	.word	0x200001b4

08000724 <_fwalk_sglue>:
 8000724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000728:	4607      	mov	r7, r0
 800072a:	4688      	mov	r8, r1
 800072c:	4614      	mov	r4, r2
 800072e:	2600      	movs	r6, #0
 8000730:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000734:	f1b9 0901 	subs.w	r9, r9, #1
 8000738:	d505      	bpl.n	8000746 <_fwalk_sglue+0x22>
 800073a:	6824      	ldr	r4, [r4, #0]
 800073c:	2c00      	cmp	r4, #0
 800073e:	d1f7      	bne.n	8000730 <_fwalk_sglue+0xc>
 8000740:	4630      	mov	r0, r6
 8000742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000746:	89ab      	ldrh	r3, [r5, #12]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d907      	bls.n	800075c <_fwalk_sglue+0x38>
 800074c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000750:	3301      	adds	r3, #1
 8000752:	d003      	beq.n	800075c <_fwalk_sglue+0x38>
 8000754:	4629      	mov	r1, r5
 8000756:	4638      	mov	r0, r7
 8000758:	47c0      	blx	r8
 800075a:	4306      	orrs	r6, r0
 800075c:	3568      	adds	r5, #104	@ 0x68
 800075e:	e7e9      	b.n	8000734 <_fwalk_sglue+0x10>

08000760 <iprintf>:
 8000760:	b40f      	push	{r0, r1, r2, r3}
 8000762:	b507      	push	{r0, r1, r2, lr}
 8000764:	4906      	ldr	r1, [pc, #24]	@ (8000780 <iprintf+0x20>)
 8000766:	ab04      	add	r3, sp, #16
 8000768:	6808      	ldr	r0, [r1, #0]
 800076a:	f853 2b04 	ldr.w	r2, [r3], #4
 800076e:	6881      	ldr	r1, [r0, #8]
 8000770:	9301      	str	r3, [sp, #4]
 8000772:	f000 fad9 	bl	8000d28 <_vfiprintf_r>
 8000776:	b003      	add	sp, #12
 8000778:	f85d eb04 	ldr.w	lr, [sp], #4
 800077c:	b004      	add	sp, #16
 800077e:	4770      	bx	lr
 8000780:	2000000c 	.word	0x2000000c

08000784 <_puts_r>:
 8000784:	6a03      	ldr	r3, [r0, #32]
 8000786:	b570      	push	{r4, r5, r6, lr}
 8000788:	6884      	ldr	r4, [r0, #8]
 800078a:	4605      	mov	r5, r0
 800078c:	460e      	mov	r6, r1
 800078e:	b90b      	cbnz	r3, 8000794 <_puts_r+0x10>
 8000790:	f7ff ffb0 	bl	80006f4 <__sinit>
 8000794:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000796:	07db      	lsls	r3, r3, #31
 8000798:	d405      	bmi.n	80007a6 <_puts_r+0x22>
 800079a:	89a3      	ldrh	r3, [r4, #12]
 800079c:	0598      	lsls	r0, r3, #22
 800079e:	d402      	bmi.n	80007a6 <_puts_r+0x22>
 80007a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007a2:	f000 f99e 	bl	8000ae2 <__retarget_lock_acquire_recursive>
 80007a6:	89a3      	ldrh	r3, [r4, #12]
 80007a8:	0719      	lsls	r1, r3, #28
 80007aa:	d502      	bpl.n	80007b2 <_puts_r+0x2e>
 80007ac:	6923      	ldr	r3, [r4, #16]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d135      	bne.n	800081e <_puts_r+0x9a>
 80007b2:	4621      	mov	r1, r4
 80007b4:	4628      	mov	r0, r5
 80007b6:	f000 f8c5 	bl	8000944 <__swsetup_r>
 80007ba:	b380      	cbz	r0, 800081e <_puts_r+0x9a>
 80007bc:	f04f 35ff 	mov.w	r5, #4294967295
 80007c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80007c2:	07da      	lsls	r2, r3, #31
 80007c4:	d405      	bmi.n	80007d2 <_puts_r+0x4e>
 80007c6:	89a3      	ldrh	r3, [r4, #12]
 80007c8:	059b      	lsls	r3, r3, #22
 80007ca:	d402      	bmi.n	80007d2 <_puts_r+0x4e>
 80007cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007ce:	f000 f989 	bl	8000ae4 <__retarget_lock_release_recursive>
 80007d2:	4628      	mov	r0, r5
 80007d4:	bd70      	pop	{r4, r5, r6, pc}
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da04      	bge.n	80007e4 <_puts_r+0x60>
 80007da:	69a2      	ldr	r2, [r4, #24]
 80007dc:	429a      	cmp	r2, r3
 80007de:	dc17      	bgt.n	8000810 <_puts_r+0x8c>
 80007e0:	290a      	cmp	r1, #10
 80007e2:	d015      	beq.n	8000810 <_puts_r+0x8c>
 80007e4:	6823      	ldr	r3, [r4, #0]
 80007e6:	1c5a      	adds	r2, r3, #1
 80007e8:	6022      	str	r2, [r4, #0]
 80007ea:	7019      	strb	r1, [r3, #0]
 80007ec:	68a3      	ldr	r3, [r4, #8]
 80007ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007f2:	3b01      	subs	r3, #1
 80007f4:	60a3      	str	r3, [r4, #8]
 80007f6:	2900      	cmp	r1, #0
 80007f8:	d1ed      	bne.n	80007d6 <_puts_r+0x52>
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	da11      	bge.n	8000822 <_puts_r+0x9e>
 80007fe:	4622      	mov	r2, r4
 8000800:	210a      	movs	r1, #10
 8000802:	4628      	mov	r0, r5
 8000804:	f000 f85f 	bl	80008c6 <__swbuf_r>
 8000808:	3001      	adds	r0, #1
 800080a:	d0d7      	beq.n	80007bc <_puts_r+0x38>
 800080c:	250a      	movs	r5, #10
 800080e:	e7d7      	b.n	80007c0 <_puts_r+0x3c>
 8000810:	4622      	mov	r2, r4
 8000812:	4628      	mov	r0, r5
 8000814:	f000 f857 	bl	80008c6 <__swbuf_r>
 8000818:	3001      	adds	r0, #1
 800081a:	d1e7      	bne.n	80007ec <_puts_r+0x68>
 800081c:	e7ce      	b.n	80007bc <_puts_r+0x38>
 800081e:	3e01      	subs	r6, #1
 8000820:	e7e4      	b.n	80007ec <_puts_r+0x68>
 8000822:	6823      	ldr	r3, [r4, #0]
 8000824:	1c5a      	adds	r2, r3, #1
 8000826:	6022      	str	r2, [r4, #0]
 8000828:	220a      	movs	r2, #10
 800082a:	701a      	strb	r2, [r3, #0]
 800082c:	e7ee      	b.n	800080c <_puts_r+0x88>
	...

08000830 <puts>:
 8000830:	4b02      	ldr	r3, [pc, #8]	@ (800083c <puts+0xc>)
 8000832:	4601      	mov	r1, r0
 8000834:	6818      	ldr	r0, [r3, #0]
 8000836:	f7ff bfa5 	b.w	8000784 <_puts_r>
 800083a:	bf00      	nop
 800083c:	2000000c 	.word	0x2000000c

08000840 <__sread>:
 8000840:	b510      	push	{r4, lr}
 8000842:	460c      	mov	r4, r1
 8000844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000848:	f000 f8fc 	bl	8000a44 <_read_r>
 800084c:	2800      	cmp	r0, #0
 800084e:	bfab      	itete	ge
 8000850:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000852:	89a3      	ldrhlt	r3, [r4, #12]
 8000854:	181b      	addge	r3, r3, r0
 8000856:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800085a:	bfac      	ite	ge
 800085c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800085e:	81a3      	strhlt	r3, [r4, #12]
 8000860:	bd10      	pop	{r4, pc}

08000862 <__swrite>:
 8000862:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000866:	461f      	mov	r7, r3
 8000868:	898b      	ldrh	r3, [r1, #12]
 800086a:	05db      	lsls	r3, r3, #23
 800086c:	4605      	mov	r5, r0
 800086e:	460c      	mov	r4, r1
 8000870:	4616      	mov	r6, r2
 8000872:	d505      	bpl.n	8000880 <__swrite+0x1e>
 8000874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000878:	2302      	movs	r3, #2
 800087a:	2200      	movs	r2, #0
 800087c:	f000 f8d0 	bl	8000a20 <_lseek_r>
 8000880:	89a3      	ldrh	r3, [r4, #12]
 8000882:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000886:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800088a:	81a3      	strh	r3, [r4, #12]
 800088c:	4632      	mov	r2, r6
 800088e:	463b      	mov	r3, r7
 8000890:	4628      	mov	r0, r5
 8000892:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000896:	f000 b8e7 	b.w	8000a68 <_write_r>

0800089a <__sseek>:
 800089a:	b510      	push	{r4, lr}
 800089c:	460c      	mov	r4, r1
 800089e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008a2:	f000 f8bd 	bl	8000a20 <_lseek_r>
 80008a6:	1c43      	adds	r3, r0, #1
 80008a8:	89a3      	ldrh	r3, [r4, #12]
 80008aa:	bf15      	itete	ne
 80008ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80008ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80008b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80008b6:	81a3      	strheq	r3, [r4, #12]
 80008b8:	bf18      	it	ne
 80008ba:	81a3      	strhne	r3, [r4, #12]
 80008bc:	bd10      	pop	{r4, pc}

080008be <__sclose>:
 80008be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008c2:	f000 b89d 	b.w	8000a00 <_close_r>

080008c6 <__swbuf_r>:
 80008c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c8:	460e      	mov	r6, r1
 80008ca:	4614      	mov	r4, r2
 80008cc:	4605      	mov	r5, r0
 80008ce:	b118      	cbz	r0, 80008d8 <__swbuf_r+0x12>
 80008d0:	6a03      	ldr	r3, [r0, #32]
 80008d2:	b90b      	cbnz	r3, 80008d8 <__swbuf_r+0x12>
 80008d4:	f7ff ff0e 	bl	80006f4 <__sinit>
 80008d8:	69a3      	ldr	r3, [r4, #24]
 80008da:	60a3      	str	r3, [r4, #8]
 80008dc:	89a3      	ldrh	r3, [r4, #12]
 80008de:	071a      	lsls	r2, r3, #28
 80008e0:	d501      	bpl.n	80008e6 <__swbuf_r+0x20>
 80008e2:	6923      	ldr	r3, [r4, #16]
 80008e4:	b943      	cbnz	r3, 80008f8 <__swbuf_r+0x32>
 80008e6:	4621      	mov	r1, r4
 80008e8:	4628      	mov	r0, r5
 80008ea:	f000 f82b 	bl	8000944 <__swsetup_r>
 80008ee:	b118      	cbz	r0, 80008f8 <__swbuf_r+0x32>
 80008f0:	f04f 37ff 	mov.w	r7, #4294967295
 80008f4:	4638      	mov	r0, r7
 80008f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008f8:	6823      	ldr	r3, [r4, #0]
 80008fa:	6922      	ldr	r2, [r4, #16]
 80008fc:	1a98      	subs	r0, r3, r2
 80008fe:	6963      	ldr	r3, [r4, #20]
 8000900:	b2f6      	uxtb	r6, r6
 8000902:	4283      	cmp	r3, r0
 8000904:	4637      	mov	r7, r6
 8000906:	dc05      	bgt.n	8000914 <__swbuf_r+0x4e>
 8000908:	4621      	mov	r1, r4
 800090a:	4628      	mov	r0, r5
 800090c:	f000 fd32 	bl	8001374 <_fflush_r>
 8000910:	2800      	cmp	r0, #0
 8000912:	d1ed      	bne.n	80008f0 <__swbuf_r+0x2a>
 8000914:	68a3      	ldr	r3, [r4, #8]
 8000916:	3b01      	subs	r3, #1
 8000918:	60a3      	str	r3, [r4, #8]
 800091a:	6823      	ldr	r3, [r4, #0]
 800091c:	1c5a      	adds	r2, r3, #1
 800091e:	6022      	str	r2, [r4, #0]
 8000920:	701e      	strb	r6, [r3, #0]
 8000922:	6962      	ldr	r2, [r4, #20]
 8000924:	1c43      	adds	r3, r0, #1
 8000926:	429a      	cmp	r2, r3
 8000928:	d004      	beq.n	8000934 <__swbuf_r+0x6e>
 800092a:	89a3      	ldrh	r3, [r4, #12]
 800092c:	07db      	lsls	r3, r3, #31
 800092e:	d5e1      	bpl.n	80008f4 <__swbuf_r+0x2e>
 8000930:	2e0a      	cmp	r6, #10
 8000932:	d1df      	bne.n	80008f4 <__swbuf_r+0x2e>
 8000934:	4621      	mov	r1, r4
 8000936:	4628      	mov	r0, r5
 8000938:	f000 fd1c 	bl	8001374 <_fflush_r>
 800093c:	2800      	cmp	r0, #0
 800093e:	d0d9      	beq.n	80008f4 <__swbuf_r+0x2e>
 8000940:	e7d6      	b.n	80008f0 <__swbuf_r+0x2a>
	...

08000944 <__swsetup_r>:
 8000944:	b538      	push	{r3, r4, r5, lr}
 8000946:	4b29      	ldr	r3, [pc, #164]	@ (80009ec <__swsetup_r+0xa8>)
 8000948:	4605      	mov	r5, r0
 800094a:	6818      	ldr	r0, [r3, #0]
 800094c:	460c      	mov	r4, r1
 800094e:	b118      	cbz	r0, 8000958 <__swsetup_r+0x14>
 8000950:	6a03      	ldr	r3, [r0, #32]
 8000952:	b90b      	cbnz	r3, 8000958 <__swsetup_r+0x14>
 8000954:	f7ff fece 	bl	80006f4 <__sinit>
 8000958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800095c:	0719      	lsls	r1, r3, #28
 800095e:	d422      	bmi.n	80009a6 <__swsetup_r+0x62>
 8000960:	06da      	lsls	r2, r3, #27
 8000962:	d407      	bmi.n	8000974 <__swsetup_r+0x30>
 8000964:	2209      	movs	r2, #9
 8000966:	602a      	str	r2, [r5, #0]
 8000968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800096c:	81a3      	strh	r3, [r4, #12]
 800096e:	f04f 30ff 	mov.w	r0, #4294967295
 8000972:	e033      	b.n	80009dc <__swsetup_r+0x98>
 8000974:	0758      	lsls	r0, r3, #29
 8000976:	d512      	bpl.n	800099e <__swsetup_r+0x5a>
 8000978:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800097a:	b141      	cbz	r1, 800098e <__swsetup_r+0x4a>
 800097c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000980:	4299      	cmp	r1, r3
 8000982:	d002      	beq.n	800098a <__swsetup_r+0x46>
 8000984:	4628      	mov	r0, r5
 8000986:	f000 f8af 	bl	8000ae8 <_free_r>
 800098a:	2300      	movs	r3, #0
 800098c:	6363      	str	r3, [r4, #52]	@ 0x34
 800098e:	89a3      	ldrh	r3, [r4, #12]
 8000990:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000994:	81a3      	strh	r3, [r4, #12]
 8000996:	2300      	movs	r3, #0
 8000998:	6063      	str	r3, [r4, #4]
 800099a:	6923      	ldr	r3, [r4, #16]
 800099c:	6023      	str	r3, [r4, #0]
 800099e:	89a3      	ldrh	r3, [r4, #12]
 80009a0:	f043 0308 	orr.w	r3, r3, #8
 80009a4:	81a3      	strh	r3, [r4, #12]
 80009a6:	6923      	ldr	r3, [r4, #16]
 80009a8:	b94b      	cbnz	r3, 80009be <__swsetup_r+0x7a>
 80009aa:	89a3      	ldrh	r3, [r4, #12]
 80009ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80009b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80009b4:	d003      	beq.n	80009be <__swsetup_r+0x7a>
 80009b6:	4621      	mov	r1, r4
 80009b8:	4628      	mov	r0, r5
 80009ba:	f000 fd29 	bl	8001410 <__smakebuf_r>
 80009be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009c2:	f013 0201 	ands.w	r2, r3, #1
 80009c6:	d00a      	beq.n	80009de <__swsetup_r+0x9a>
 80009c8:	2200      	movs	r2, #0
 80009ca:	60a2      	str	r2, [r4, #8]
 80009cc:	6962      	ldr	r2, [r4, #20]
 80009ce:	4252      	negs	r2, r2
 80009d0:	61a2      	str	r2, [r4, #24]
 80009d2:	6922      	ldr	r2, [r4, #16]
 80009d4:	b942      	cbnz	r2, 80009e8 <__swsetup_r+0xa4>
 80009d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80009da:	d1c5      	bne.n	8000968 <__swsetup_r+0x24>
 80009dc:	bd38      	pop	{r3, r4, r5, pc}
 80009de:	0799      	lsls	r1, r3, #30
 80009e0:	bf58      	it	pl
 80009e2:	6962      	ldrpl	r2, [r4, #20]
 80009e4:	60a2      	str	r2, [r4, #8]
 80009e6:	e7f4      	b.n	80009d2 <__swsetup_r+0x8e>
 80009e8:	2000      	movs	r0, #0
 80009ea:	e7f7      	b.n	80009dc <__swsetup_r+0x98>
 80009ec:	2000000c 	.word	0x2000000c

080009f0 <memset>:
 80009f0:	4402      	add	r2, r0
 80009f2:	4603      	mov	r3, r0
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d100      	bne.n	80009fa <memset+0xa>
 80009f8:	4770      	bx	lr
 80009fa:	f803 1b01 	strb.w	r1, [r3], #1
 80009fe:	e7f9      	b.n	80009f4 <memset+0x4>

08000a00 <_close_r>:
 8000a00:	b538      	push	{r3, r4, r5, lr}
 8000a02:	4d06      	ldr	r5, [pc, #24]	@ (8000a1c <_close_r+0x1c>)
 8000a04:	2300      	movs	r3, #0
 8000a06:	4604      	mov	r4, r0
 8000a08:	4608      	mov	r0, r1
 8000a0a:	602b      	str	r3, [r5, #0]
 8000a0c:	f7ff fd55 	bl	80004ba <_close>
 8000a10:	1c43      	adds	r3, r0, #1
 8000a12:	d102      	bne.n	8000a1a <_close_r+0x1a>
 8000a14:	682b      	ldr	r3, [r5, #0]
 8000a16:	b103      	cbz	r3, 8000a1a <_close_r+0x1a>
 8000a18:	6023      	str	r3, [r4, #0]
 8000a1a:	bd38      	pop	{r3, r4, r5, pc}
 8000a1c:	200001b8 	.word	0x200001b8

08000a20 <_lseek_r>:
 8000a20:	b538      	push	{r3, r4, r5, lr}
 8000a22:	4d07      	ldr	r5, [pc, #28]	@ (8000a40 <_lseek_r+0x20>)
 8000a24:	4604      	mov	r4, r0
 8000a26:	4608      	mov	r0, r1
 8000a28:	4611      	mov	r1, r2
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	602a      	str	r2, [r5, #0]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	f7ff fd67 	bl	8000502 <_lseek>
 8000a34:	1c43      	adds	r3, r0, #1
 8000a36:	d102      	bne.n	8000a3e <_lseek_r+0x1e>
 8000a38:	682b      	ldr	r3, [r5, #0]
 8000a3a:	b103      	cbz	r3, 8000a3e <_lseek_r+0x1e>
 8000a3c:	6023      	str	r3, [r4, #0]
 8000a3e:	bd38      	pop	{r3, r4, r5, pc}
 8000a40:	200001b8 	.word	0x200001b8

08000a44 <_read_r>:
 8000a44:	b538      	push	{r3, r4, r5, lr}
 8000a46:	4d07      	ldr	r5, [pc, #28]	@ (8000a64 <_read_r+0x20>)
 8000a48:	4604      	mov	r4, r0
 8000a4a:	4608      	mov	r0, r1
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	2200      	movs	r2, #0
 8000a50:	602a      	str	r2, [r5, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	f7ff fcf8 	bl	8000448 <_read>
 8000a58:	1c43      	adds	r3, r0, #1
 8000a5a:	d102      	bne.n	8000a62 <_read_r+0x1e>
 8000a5c:	682b      	ldr	r3, [r5, #0]
 8000a5e:	b103      	cbz	r3, 8000a62 <_read_r+0x1e>
 8000a60:	6023      	str	r3, [r4, #0]
 8000a62:	bd38      	pop	{r3, r4, r5, pc}
 8000a64:	200001b8 	.word	0x200001b8

08000a68 <_write_r>:
 8000a68:	b538      	push	{r3, r4, r5, lr}
 8000a6a:	4d07      	ldr	r5, [pc, #28]	@ (8000a88 <_write_r+0x20>)
 8000a6c:	4604      	mov	r4, r0
 8000a6e:	4608      	mov	r0, r1
 8000a70:	4611      	mov	r1, r2
 8000a72:	2200      	movs	r2, #0
 8000a74:	602a      	str	r2, [r5, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	f7ff fd03 	bl	8000482 <_write>
 8000a7c:	1c43      	adds	r3, r0, #1
 8000a7e:	d102      	bne.n	8000a86 <_write_r+0x1e>
 8000a80:	682b      	ldr	r3, [r5, #0]
 8000a82:	b103      	cbz	r3, 8000a86 <_write_r+0x1e>
 8000a84:	6023      	str	r3, [r4, #0]
 8000a86:	bd38      	pop	{r3, r4, r5, pc}
 8000a88:	200001b8 	.word	0x200001b8

08000a8c <__errno>:
 8000a8c:	4b01      	ldr	r3, [pc, #4]	@ (8000a94 <__errno+0x8>)
 8000a8e:	6818      	ldr	r0, [r3, #0]
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	2000000c 	.word	0x2000000c

08000a98 <__libc_init_array>:
 8000a98:	b570      	push	{r4, r5, r6, lr}
 8000a9a:	4d0d      	ldr	r5, [pc, #52]	@ (8000ad0 <__libc_init_array+0x38>)
 8000a9c:	4c0d      	ldr	r4, [pc, #52]	@ (8000ad4 <__libc_init_array+0x3c>)
 8000a9e:	1b64      	subs	r4, r4, r5
 8000aa0:	10a4      	asrs	r4, r4, #2
 8000aa2:	2600      	movs	r6, #0
 8000aa4:	42a6      	cmp	r6, r4
 8000aa6:	d109      	bne.n	8000abc <__libc_init_array+0x24>
 8000aa8:	4d0b      	ldr	r5, [pc, #44]	@ (8000ad8 <__libc_init_array+0x40>)
 8000aaa:	4c0c      	ldr	r4, [pc, #48]	@ (8000adc <__libc_init_array+0x44>)
 8000aac:	f000 fd1e 	bl	80014ec <_init>
 8000ab0:	1b64      	subs	r4, r4, r5
 8000ab2:	10a4      	asrs	r4, r4, #2
 8000ab4:	2600      	movs	r6, #0
 8000ab6:	42a6      	cmp	r6, r4
 8000ab8:	d105      	bne.n	8000ac6 <__libc_init_array+0x2e>
 8000aba:	bd70      	pop	{r4, r5, r6, pc}
 8000abc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ac0:	4798      	blx	r3
 8000ac2:	3601      	adds	r6, #1
 8000ac4:	e7ee      	b.n	8000aa4 <__libc_init_array+0xc>
 8000ac6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aca:	4798      	blx	r3
 8000acc:	3601      	adds	r6, #1
 8000ace:	e7f2      	b.n	8000ab6 <__libc_init_array+0x1e>
 8000ad0:	080015c8 	.word	0x080015c8
 8000ad4:	080015c8 	.word	0x080015c8
 8000ad8:	080015c8 	.word	0x080015c8
 8000adc:	080015cc 	.word	0x080015cc

08000ae0 <__retarget_lock_init_recursive>:
 8000ae0:	4770      	bx	lr

08000ae2 <__retarget_lock_acquire_recursive>:
 8000ae2:	4770      	bx	lr

08000ae4 <__retarget_lock_release_recursive>:
 8000ae4:	4770      	bx	lr
	...

08000ae8 <_free_r>:
 8000ae8:	b538      	push	{r3, r4, r5, lr}
 8000aea:	4605      	mov	r5, r0
 8000aec:	2900      	cmp	r1, #0
 8000aee:	d041      	beq.n	8000b74 <_free_r+0x8c>
 8000af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000af4:	1f0c      	subs	r4, r1, #4
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	bfb8      	it	lt
 8000afa:	18e4      	addlt	r4, r4, r3
 8000afc:	f000 f8e0 	bl	8000cc0 <__malloc_lock>
 8000b00:	4a1d      	ldr	r2, [pc, #116]	@ (8000b78 <_free_r+0x90>)
 8000b02:	6813      	ldr	r3, [r2, #0]
 8000b04:	b933      	cbnz	r3, 8000b14 <_free_r+0x2c>
 8000b06:	6063      	str	r3, [r4, #4]
 8000b08:	6014      	str	r4, [r2, #0]
 8000b0a:	4628      	mov	r0, r5
 8000b0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b10:	f000 b8dc 	b.w	8000ccc <__malloc_unlock>
 8000b14:	42a3      	cmp	r3, r4
 8000b16:	d908      	bls.n	8000b2a <_free_r+0x42>
 8000b18:	6820      	ldr	r0, [r4, #0]
 8000b1a:	1821      	adds	r1, r4, r0
 8000b1c:	428b      	cmp	r3, r1
 8000b1e:	bf01      	itttt	eq
 8000b20:	6819      	ldreq	r1, [r3, #0]
 8000b22:	685b      	ldreq	r3, [r3, #4]
 8000b24:	1809      	addeq	r1, r1, r0
 8000b26:	6021      	streq	r1, [r4, #0]
 8000b28:	e7ed      	b.n	8000b06 <_free_r+0x1e>
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	b10b      	cbz	r3, 8000b34 <_free_r+0x4c>
 8000b30:	42a3      	cmp	r3, r4
 8000b32:	d9fa      	bls.n	8000b2a <_free_r+0x42>
 8000b34:	6811      	ldr	r1, [r2, #0]
 8000b36:	1850      	adds	r0, r2, r1
 8000b38:	42a0      	cmp	r0, r4
 8000b3a:	d10b      	bne.n	8000b54 <_free_r+0x6c>
 8000b3c:	6820      	ldr	r0, [r4, #0]
 8000b3e:	4401      	add	r1, r0
 8000b40:	1850      	adds	r0, r2, r1
 8000b42:	4283      	cmp	r3, r0
 8000b44:	6011      	str	r1, [r2, #0]
 8000b46:	d1e0      	bne.n	8000b0a <_free_r+0x22>
 8000b48:	6818      	ldr	r0, [r3, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	6053      	str	r3, [r2, #4]
 8000b4e:	4408      	add	r0, r1
 8000b50:	6010      	str	r0, [r2, #0]
 8000b52:	e7da      	b.n	8000b0a <_free_r+0x22>
 8000b54:	d902      	bls.n	8000b5c <_free_r+0x74>
 8000b56:	230c      	movs	r3, #12
 8000b58:	602b      	str	r3, [r5, #0]
 8000b5a:	e7d6      	b.n	8000b0a <_free_r+0x22>
 8000b5c:	6820      	ldr	r0, [r4, #0]
 8000b5e:	1821      	adds	r1, r4, r0
 8000b60:	428b      	cmp	r3, r1
 8000b62:	bf04      	itt	eq
 8000b64:	6819      	ldreq	r1, [r3, #0]
 8000b66:	685b      	ldreq	r3, [r3, #4]
 8000b68:	6063      	str	r3, [r4, #4]
 8000b6a:	bf04      	itt	eq
 8000b6c:	1809      	addeq	r1, r1, r0
 8000b6e:	6021      	streq	r1, [r4, #0]
 8000b70:	6054      	str	r4, [r2, #4]
 8000b72:	e7ca      	b.n	8000b0a <_free_r+0x22>
 8000b74:	bd38      	pop	{r3, r4, r5, pc}
 8000b76:	bf00      	nop
 8000b78:	200001c4 	.word	0x200001c4

08000b7c <sbrk_aligned>:
 8000b7c:	b570      	push	{r4, r5, r6, lr}
 8000b7e:	4e0f      	ldr	r6, [pc, #60]	@ (8000bbc <sbrk_aligned+0x40>)
 8000b80:	460c      	mov	r4, r1
 8000b82:	6831      	ldr	r1, [r6, #0]
 8000b84:	4605      	mov	r5, r0
 8000b86:	b911      	cbnz	r1, 8000b8e <sbrk_aligned+0x12>
 8000b88:	f000 fca0 	bl	80014cc <_sbrk_r>
 8000b8c:	6030      	str	r0, [r6, #0]
 8000b8e:	4621      	mov	r1, r4
 8000b90:	4628      	mov	r0, r5
 8000b92:	f000 fc9b 	bl	80014cc <_sbrk_r>
 8000b96:	1c43      	adds	r3, r0, #1
 8000b98:	d103      	bne.n	8000ba2 <sbrk_aligned+0x26>
 8000b9a:	f04f 34ff 	mov.w	r4, #4294967295
 8000b9e:	4620      	mov	r0, r4
 8000ba0:	bd70      	pop	{r4, r5, r6, pc}
 8000ba2:	1cc4      	adds	r4, r0, #3
 8000ba4:	f024 0403 	bic.w	r4, r4, #3
 8000ba8:	42a0      	cmp	r0, r4
 8000baa:	d0f8      	beq.n	8000b9e <sbrk_aligned+0x22>
 8000bac:	1a21      	subs	r1, r4, r0
 8000bae:	4628      	mov	r0, r5
 8000bb0:	f000 fc8c 	bl	80014cc <_sbrk_r>
 8000bb4:	3001      	adds	r0, #1
 8000bb6:	d1f2      	bne.n	8000b9e <sbrk_aligned+0x22>
 8000bb8:	e7ef      	b.n	8000b9a <sbrk_aligned+0x1e>
 8000bba:	bf00      	nop
 8000bbc:	200001c0 	.word	0x200001c0

08000bc0 <_malloc_r>:
 8000bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bc4:	1ccd      	adds	r5, r1, #3
 8000bc6:	f025 0503 	bic.w	r5, r5, #3
 8000bca:	3508      	adds	r5, #8
 8000bcc:	2d0c      	cmp	r5, #12
 8000bce:	bf38      	it	cc
 8000bd0:	250c      	movcc	r5, #12
 8000bd2:	2d00      	cmp	r5, #0
 8000bd4:	4606      	mov	r6, r0
 8000bd6:	db01      	blt.n	8000bdc <_malloc_r+0x1c>
 8000bd8:	42a9      	cmp	r1, r5
 8000bda:	d904      	bls.n	8000be6 <_malloc_r+0x26>
 8000bdc:	230c      	movs	r3, #12
 8000bde:	6033      	str	r3, [r6, #0]
 8000be0:	2000      	movs	r0, #0
 8000be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000be6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000cbc <_malloc_r+0xfc>
 8000bea:	f000 f869 	bl	8000cc0 <__malloc_lock>
 8000bee:	f8d8 3000 	ldr.w	r3, [r8]
 8000bf2:	461c      	mov	r4, r3
 8000bf4:	bb44      	cbnz	r4, 8000c48 <_malloc_r+0x88>
 8000bf6:	4629      	mov	r1, r5
 8000bf8:	4630      	mov	r0, r6
 8000bfa:	f7ff ffbf 	bl	8000b7c <sbrk_aligned>
 8000bfe:	1c43      	adds	r3, r0, #1
 8000c00:	4604      	mov	r4, r0
 8000c02:	d158      	bne.n	8000cb6 <_malloc_r+0xf6>
 8000c04:	f8d8 4000 	ldr.w	r4, [r8]
 8000c08:	4627      	mov	r7, r4
 8000c0a:	2f00      	cmp	r7, #0
 8000c0c:	d143      	bne.n	8000c96 <_malloc_r+0xd6>
 8000c0e:	2c00      	cmp	r4, #0
 8000c10:	d04b      	beq.n	8000caa <_malloc_r+0xea>
 8000c12:	6823      	ldr	r3, [r4, #0]
 8000c14:	4639      	mov	r1, r7
 8000c16:	4630      	mov	r0, r6
 8000c18:	eb04 0903 	add.w	r9, r4, r3
 8000c1c:	f000 fc56 	bl	80014cc <_sbrk_r>
 8000c20:	4581      	cmp	r9, r0
 8000c22:	d142      	bne.n	8000caa <_malloc_r+0xea>
 8000c24:	6821      	ldr	r1, [r4, #0]
 8000c26:	1a6d      	subs	r5, r5, r1
 8000c28:	4629      	mov	r1, r5
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	f7ff ffa6 	bl	8000b7c <sbrk_aligned>
 8000c30:	3001      	adds	r0, #1
 8000c32:	d03a      	beq.n	8000caa <_malloc_r+0xea>
 8000c34:	6823      	ldr	r3, [r4, #0]
 8000c36:	442b      	add	r3, r5
 8000c38:	6023      	str	r3, [r4, #0]
 8000c3a:	f8d8 3000 	ldr.w	r3, [r8]
 8000c3e:	685a      	ldr	r2, [r3, #4]
 8000c40:	bb62      	cbnz	r2, 8000c9c <_malloc_r+0xdc>
 8000c42:	f8c8 7000 	str.w	r7, [r8]
 8000c46:	e00f      	b.n	8000c68 <_malloc_r+0xa8>
 8000c48:	6822      	ldr	r2, [r4, #0]
 8000c4a:	1b52      	subs	r2, r2, r5
 8000c4c:	d420      	bmi.n	8000c90 <_malloc_r+0xd0>
 8000c4e:	2a0b      	cmp	r2, #11
 8000c50:	d917      	bls.n	8000c82 <_malloc_r+0xc2>
 8000c52:	1961      	adds	r1, r4, r5
 8000c54:	42a3      	cmp	r3, r4
 8000c56:	6025      	str	r5, [r4, #0]
 8000c58:	bf18      	it	ne
 8000c5a:	6059      	strne	r1, [r3, #4]
 8000c5c:	6863      	ldr	r3, [r4, #4]
 8000c5e:	bf08      	it	eq
 8000c60:	f8c8 1000 	streq.w	r1, [r8]
 8000c64:	5162      	str	r2, [r4, r5]
 8000c66:	604b      	str	r3, [r1, #4]
 8000c68:	4630      	mov	r0, r6
 8000c6a:	f000 f82f 	bl	8000ccc <__malloc_unlock>
 8000c6e:	f104 000b 	add.w	r0, r4, #11
 8000c72:	1d23      	adds	r3, r4, #4
 8000c74:	f020 0007 	bic.w	r0, r0, #7
 8000c78:	1ac2      	subs	r2, r0, r3
 8000c7a:	bf1c      	itt	ne
 8000c7c:	1a1b      	subne	r3, r3, r0
 8000c7e:	50a3      	strne	r3, [r4, r2]
 8000c80:	e7af      	b.n	8000be2 <_malloc_r+0x22>
 8000c82:	6862      	ldr	r2, [r4, #4]
 8000c84:	42a3      	cmp	r3, r4
 8000c86:	bf0c      	ite	eq
 8000c88:	f8c8 2000 	streq.w	r2, [r8]
 8000c8c:	605a      	strne	r2, [r3, #4]
 8000c8e:	e7eb      	b.n	8000c68 <_malloc_r+0xa8>
 8000c90:	4623      	mov	r3, r4
 8000c92:	6864      	ldr	r4, [r4, #4]
 8000c94:	e7ae      	b.n	8000bf4 <_malloc_r+0x34>
 8000c96:	463c      	mov	r4, r7
 8000c98:	687f      	ldr	r7, [r7, #4]
 8000c9a:	e7b6      	b.n	8000c0a <_malloc_r+0x4a>
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	42a3      	cmp	r3, r4
 8000ca2:	d1fb      	bne.n	8000c9c <_malloc_r+0xdc>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	6053      	str	r3, [r2, #4]
 8000ca8:	e7de      	b.n	8000c68 <_malloc_r+0xa8>
 8000caa:	230c      	movs	r3, #12
 8000cac:	6033      	str	r3, [r6, #0]
 8000cae:	4630      	mov	r0, r6
 8000cb0:	f000 f80c 	bl	8000ccc <__malloc_unlock>
 8000cb4:	e794      	b.n	8000be0 <_malloc_r+0x20>
 8000cb6:	6005      	str	r5, [r0, #0]
 8000cb8:	e7d6      	b.n	8000c68 <_malloc_r+0xa8>
 8000cba:	bf00      	nop
 8000cbc:	200001c4 	.word	0x200001c4

08000cc0 <__malloc_lock>:
 8000cc0:	4801      	ldr	r0, [pc, #4]	@ (8000cc8 <__malloc_lock+0x8>)
 8000cc2:	f7ff bf0e 	b.w	8000ae2 <__retarget_lock_acquire_recursive>
 8000cc6:	bf00      	nop
 8000cc8:	200001bc 	.word	0x200001bc

08000ccc <__malloc_unlock>:
 8000ccc:	4801      	ldr	r0, [pc, #4]	@ (8000cd4 <__malloc_unlock+0x8>)
 8000cce:	f7ff bf09 	b.w	8000ae4 <__retarget_lock_release_recursive>
 8000cd2:	bf00      	nop
 8000cd4:	200001bc 	.word	0x200001bc

08000cd8 <__sfputc_r>:
 8000cd8:	6893      	ldr	r3, [r2, #8]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	b410      	push	{r4}
 8000ce0:	6093      	str	r3, [r2, #8]
 8000ce2:	da07      	bge.n	8000cf4 <__sfputc_r+0x1c>
 8000ce4:	6994      	ldr	r4, [r2, #24]
 8000ce6:	42a3      	cmp	r3, r4
 8000ce8:	db01      	blt.n	8000cee <__sfputc_r+0x16>
 8000cea:	290a      	cmp	r1, #10
 8000cec:	d102      	bne.n	8000cf4 <__sfputc_r+0x1c>
 8000cee:	bc10      	pop	{r4}
 8000cf0:	f7ff bde9 	b.w	80008c6 <__swbuf_r>
 8000cf4:	6813      	ldr	r3, [r2, #0]
 8000cf6:	1c58      	adds	r0, r3, #1
 8000cf8:	6010      	str	r0, [r2, #0]
 8000cfa:	7019      	strb	r1, [r3, #0]
 8000cfc:	4608      	mov	r0, r1
 8000cfe:	bc10      	pop	{r4}
 8000d00:	4770      	bx	lr

08000d02 <__sfputs_r>:
 8000d02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d04:	4606      	mov	r6, r0
 8000d06:	460f      	mov	r7, r1
 8000d08:	4614      	mov	r4, r2
 8000d0a:	18d5      	adds	r5, r2, r3
 8000d0c:	42ac      	cmp	r4, r5
 8000d0e:	d101      	bne.n	8000d14 <__sfputs_r+0x12>
 8000d10:	2000      	movs	r0, #0
 8000d12:	e007      	b.n	8000d24 <__sfputs_r+0x22>
 8000d14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d18:	463a      	mov	r2, r7
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	f7ff ffdc 	bl	8000cd8 <__sfputc_r>
 8000d20:	1c43      	adds	r3, r0, #1
 8000d22:	d1f3      	bne.n	8000d0c <__sfputs_r+0xa>
 8000d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000d28 <_vfiprintf_r>:
 8000d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d2c:	460d      	mov	r5, r1
 8000d2e:	b09d      	sub	sp, #116	@ 0x74
 8000d30:	4614      	mov	r4, r2
 8000d32:	4698      	mov	r8, r3
 8000d34:	4606      	mov	r6, r0
 8000d36:	b118      	cbz	r0, 8000d40 <_vfiprintf_r+0x18>
 8000d38:	6a03      	ldr	r3, [r0, #32]
 8000d3a:	b90b      	cbnz	r3, 8000d40 <_vfiprintf_r+0x18>
 8000d3c:	f7ff fcda 	bl	80006f4 <__sinit>
 8000d40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d42:	07d9      	lsls	r1, r3, #31
 8000d44:	d405      	bmi.n	8000d52 <_vfiprintf_r+0x2a>
 8000d46:	89ab      	ldrh	r3, [r5, #12]
 8000d48:	059a      	lsls	r2, r3, #22
 8000d4a:	d402      	bmi.n	8000d52 <_vfiprintf_r+0x2a>
 8000d4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d4e:	f7ff fec8 	bl	8000ae2 <__retarget_lock_acquire_recursive>
 8000d52:	89ab      	ldrh	r3, [r5, #12]
 8000d54:	071b      	lsls	r3, r3, #28
 8000d56:	d501      	bpl.n	8000d5c <_vfiprintf_r+0x34>
 8000d58:	692b      	ldr	r3, [r5, #16]
 8000d5a:	b99b      	cbnz	r3, 8000d84 <_vfiprintf_r+0x5c>
 8000d5c:	4629      	mov	r1, r5
 8000d5e:	4630      	mov	r0, r6
 8000d60:	f7ff fdf0 	bl	8000944 <__swsetup_r>
 8000d64:	b170      	cbz	r0, 8000d84 <_vfiprintf_r+0x5c>
 8000d66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d68:	07dc      	lsls	r4, r3, #31
 8000d6a:	d504      	bpl.n	8000d76 <_vfiprintf_r+0x4e>
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	b01d      	add	sp, #116	@ 0x74
 8000d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d76:	89ab      	ldrh	r3, [r5, #12]
 8000d78:	0598      	lsls	r0, r3, #22
 8000d7a:	d4f7      	bmi.n	8000d6c <_vfiprintf_r+0x44>
 8000d7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d7e:	f7ff feb1 	bl	8000ae4 <__retarget_lock_release_recursive>
 8000d82:	e7f3      	b.n	8000d6c <_vfiprintf_r+0x44>
 8000d84:	2300      	movs	r3, #0
 8000d86:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d88:	2320      	movs	r3, #32
 8000d8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000d8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000d92:	2330      	movs	r3, #48	@ 0x30
 8000d94:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000f44 <_vfiprintf_r+0x21c>
 8000d98:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000d9c:	f04f 0901 	mov.w	r9, #1
 8000da0:	4623      	mov	r3, r4
 8000da2:	469a      	mov	sl, r3
 8000da4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000da8:	b10a      	cbz	r2, 8000dae <_vfiprintf_r+0x86>
 8000daa:	2a25      	cmp	r2, #37	@ 0x25
 8000dac:	d1f9      	bne.n	8000da2 <_vfiprintf_r+0x7a>
 8000dae:	ebba 0b04 	subs.w	fp, sl, r4
 8000db2:	d00b      	beq.n	8000dcc <_vfiprintf_r+0xa4>
 8000db4:	465b      	mov	r3, fp
 8000db6:	4622      	mov	r2, r4
 8000db8:	4629      	mov	r1, r5
 8000dba:	4630      	mov	r0, r6
 8000dbc:	f7ff ffa1 	bl	8000d02 <__sfputs_r>
 8000dc0:	3001      	adds	r0, #1
 8000dc2:	f000 80a7 	beq.w	8000f14 <_vfiprintf_r+0x1ec>
 8000dc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000dc8:	445a      	add	r2, fp
 8000dca:	9209      	str	r2, [sp, #36]	@ 0x24
 8000dcc:	f89a 3000 	ldrb.w	r3, [sl]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f000 809f 	beq.w	8000f14 <_vfiprintf_r+0x1ec>
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ddc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000de0:	f10a 0a01 	add.w	sl, sl, #1
 8000de4:	9304      	str	r3, [sp, #16]
 8000de6:	9307      	str	r3, [sp, #28]
 8000de8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000dec:	931a      	str	r3, [sp, #104]	@ 0x68
 8000dee:	4654      	mov	r4, sl
 8000df0:	2205      	movs	r2, #5
 8000df2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000df6:	4853      	ldr	r0, [pc, #332]	@ (8000f44 <_vfiprintf_r+0x21c>)
 8000df8:	f7ff f9ea 	bl	80001d0 <memchr>
 8000dfc:	9a04      	ldr	r2, [sp, #16]
 8000dfe:	b9d8      	cbnz	r0, 8000e38 <_vfiprintf_r+0x110>
 8000e00:	06d1      	lsls	r1, r2, #27
 8000e02:	bf44      	itt	mi
 8000e04:	2320      	movmi	r3, #32
 8000e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e0a:	0713      	lsls	r3, r2, #28
 8000e0c:	bf44      	itt	mi
 8000e0e:	232b      	movmi	r3, #43	@ 0x2b
 8000e10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e14:	f89a 3000 	ldrb.w	r3, [sl]
 8000e18:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e1a:	d015      	beq.n	8000e48 <_vfiprintf_r+0x120>
 8000e1c:	9a07      	ldr	r2, [sp, #28]
 8000e1e:	4654      	mov	r4, sl
 8000e20:	2000      	movs	r0, #0
 8000e22:	f04f 0c0a 	mov.w	ip, #10
 8000e26:	4621      	mov	r1, r4
 8000e28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000e2c:	3b30      	subs	r3, #48	@ 0x30
 8000e2e:	2b09      	cmp	r3, #9
 8000e30:	d94b      	bls.n	8000eca <_vfiprintf_r+0x1a2>
 8000e32:	b1b0      	cbz	r0, 8000e62 <_vfiprintf_r+0x13a>
 8000e34:	9207      	str	r2, [sp, #28]
 8000e36:	e014      	b.n	8000e62 <_vfiprintf_r+0x13a>
 8000e38:	eba0 0308 	sub.w	r3, r0, r8
 8000e3c:	fa09 f303 	lsl.w	r3, r9, r3
 8000e40:	4313      	orrs	r3, r2
 8000e42:	9304      	str	r3, [sp, #16]
 8000e44:	46a2      	mov	sl, r4
 8000e46:	e7d2      	b.n	8000dee <_vfiprintf_r+0xc6>
 8000e48:	9b03      	ldr	r3, [sp, #12]
 8000e4a:	1d19      	adds	r1, r3, #4
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	9103      	str	r1, [sp, #12]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	bfbb      	ittet	lt
 8000e54:	425b      	neglt	r3, r3
 8000e56:	f042 0202 	orrlt.w	r2, r2, #2
 8000e5a:	9307      	strge	r3, [sp, #28]
 8000e5c:	9307      	strlt	r3, [sp, #28]
 8000e5e:	bfb8      	it	lt
 8000e60:	9204      	strlt	r2, [sp, #16]
 8000e62:	7823      	ldrb	r3, [r4, #0]
 8000e64:	2b2e      	cmp	r3, #46	@ 0x2e
 8000e66:	d10a      	bne.n	8000e7e <_vfiprintf_r+0x156>
 8000e68:	7863      	ldrb	r3, [r4, #1]
 8000e6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000e6c:	d132      	bne.n	8000ed4 <_vfiprintf_r+0x1ac>
 8000e6e:	9b03      	ldr	r3, [sp, #12]
 8000e70:	1d1a      	adds	r2, r3, #4
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	9203      	str	r2, [sp, #12]
 8000e76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000e7a:	3402      	adds	r4, #2
 8000e7c:	9305      	str	r3, [sp, #20]
 8000e7e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8000f48 <_vfiprintf_r+0x220>
 8000e82:	7821      	ldrb	r1, [r4, #0]
 8000e84:	2203      	movs	r2, #3
 8000e86:	4650      	mov	r0, sl
 8000e88:	f7ff f9a2 	bl	80001d0 <memchr>
 8000e8c:	b138      	cbz	r0, 8000e9e <_vfiprintf_r+0x176>
 8000e8e:	9b04      	ldr	r3, [sp, #16]
 8000e90:	eba0 000a 	sub.w	r0, r0, sl
 8000e94:	2240      	movs	r2, #64	@ 0x40
 8000e96:	4082      	lsls	r2, r0
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	3401      	adds	r4, #1
 8000e9c:	9304      	str	r3, [sp, #16]
 8000e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ea2:	482a      	ldr	r0, [pc, #168]	@ (8000f4c <_vfiprintf_r+0x224>)
 8000ea4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000ea8:	2206      	movs	r2, #6
 8000eaa:	f7ff f991 	bl	80001d0 <memchr>
 8000eae:	2800      	cmp	r0, #0
 8000eb0:	d03f      	beq.n	8000f32 <_vfiprintf_r+0x20a>
 8000eb2:	4b27      	ldr	r3, [pc, #156]	@ (8000f50 <_vfiprintf_r+0x228>)
 8000eb4:	bb1b      	cbnz	r3, 8000efe <_vfiprintf_r+0x1d6>
 8000eb6:	9b03      	ldr	r3, [sp, #12]
 8000eb8:	3307      	adds	r3, #7
 8000eba:	f023 0307 	bic.w	r3, r3, #7
 8000ebe:	3308      	adds	r3, #8
 8000ec0:	9303      	str	r3, [sp, #12]
 8000ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000ec4:	443b      	add	r3, r7
 8000ec6:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ec8:	e76a      	b.n	8000da0 <_vfiprintf_r+0x78>
 8000eca:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ece:	460c      	mov	r4, r1
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	e7a8      	b.n	8000e26 <_vfiprintf_r+0xfe>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	3401      	adds	r4, #1
 8000ed8:	9305      	str	r3, [sp, #20]
 8000eda:	4619      	mov	r1, r3
 8000edc:	f04f 0c0a 	mov.w	ip, #10
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ee6:	3a30      	subs	r2, #48	@ 0x30
 8000ee8:	2a09      	cmp	r2, #9
 8000eea:	d903      	bls.n	8000ef4 <_vfiprintf_r+0x1cc>
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d0c6      	beq.n	8000e7e <_vfiprintf_r+0x156>
 8000ef0:	9105      	str	r1, [sp, #20]
 8000ef2:	e7c4      	b.n	8000e7e <_vfiprintf_r+0x156>
 8000ef4:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ef8:	4604      	mov	r4, r0
 8000efa:	2301      	movs	r3, #1
 8000efc:	e7f0      	b.n	8000ee0 <_vfiprintf_r+0x1b8>
 8000efe:	ab03      	add	r3, sp, #12
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	462a      	mov	r2, r5
 8000f04:	4b13      	ldr	r3, [pc, #76]	@ (8000f54 <_vfiprintf_r+0x22c>)
 8000f06:	a904      	add	r1, sp, #16
 8000f08:	4630      	mov	r0, r6
 8000f0a:	f3af 8000 	nop.w
 8000f0e:	4607      	mov	r7, r0
 8000f10:	1c78      	adds	r0, r7, #1
 8000f12:	d1d6      	bne.n	8000ec2 <_vfiprintf_r+0x19a>
 8000f14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000f16:	07d9      	lsls	r1, r3, #31
 8000f18:	d405      	bmi.n	8000f26 <_vfiprintf_r+0x1fe>
 8000f1a:	89ab      	ldrh	r3, [r5, #12]
 8000f1c:	059a      	lsls	r2, r3, #22
 8000f1e:	d402      	bmi.n	8000f26 <_vfiprintf_r+0x1fe>
 8000f20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000f22:	f7ff fddf 	bl	8000ae4 <__retarget_lock_release_recursive>
 8000f26:	89ab      	ldrh	r3, [r5, #12]
 8000f28:	065b      	lsls	r3, r3, #25
 8000f2a:	f53f af1f 	bmi.w	8000d6c <_vfiprintf_r+0x44>
 8000f2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000f30:	e71e      	b.n	8000d70 <_vfiprintf_r+0x48>
 8000f32:	ab03      	add	r3, sp, #12
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	462a      	mov	r2, r5
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <_vfiprintf_r+0x22c>)
 8000f3a:	a904      	add	r1, sp, #16
 8000f3c:	4630      	mov	r0, r6
 8000f3e:	f000 f879 	bl	8001034 <_printf_i>
 8000f42:	e7e4      	b.n	8000f0e <_vfiprintf_r+0x1e6>
 8000f44:	0800158a 	.word	0x0800158a
 8000f48:	08001590 	.word	0x08001590
 8000f4c:	08001594 	.word	0x08001594
 8000f50:	00000000 	.word	0x00000000
 8000f54:	08000d03 	.word	0x08000d03

08000f58 <_printf_common>:
 8000f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f5c:	4616      	mov	r6, r2
 8000f5e:	4698      	mov	r8, r3
 8000f60:	688a      	ldr	r2, [r1, #8]
 8000f62:	690b      	ldr	r3, [r1, #16]
 8000f64:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	bfb8      	it	lt
 8000f6c:	4613      	movlt	r3, r2
 8000f6e:	6033      	str	r3, [r6, #0]
 8000f70:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000f74:	4607      	mov	r7, r0
 8000f76:	460c      	mov	r4, r1
 8000f78:	b10a      	cbz	r2, 8000f7e <_printf_common+0x26>
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	6033      	str	r3, [r6, #0]
 8000f7e:	6823      	ldr	r3, [r4, #0]
 8000f80:	0699      	lsls	r1, r3, #26
 8000f82:	bf42      	ittt	mi
 8000f84:	6833      	ldrmi	r3, [r6, #0]
 8000f86:	3302      	addmi	r3, #2
 8000f88:	6033      	strmi	r3, [r6, #0]
 8000f8a:	6825      	ldr	r5, [r4, #0]
 8000f8c:	f015 0506 	ands.w	r5, r5, #6
 8000f90:	d106      	bne.n	8000fa0 <_printf_common+0x48>
 8000f92:	f104 0a19 	add.w	sl, r4, #25
 8000f96:	68e3      	ldr	r3, [r4, #12]
 8000f98:	6832      	ldr	r2, [r6, #0]
 8000f9a:	1a9b      	subs	r3, r3, r2
 8000f9c:	42ab      	cmp	r3, r5
 8000f9e:	dc26      	bgt.n	8000fee <_printf_common+0x96>
 8000fa0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000fa4:	6822      	ldr	r2, [r4, #0]
 8000fa6:	3b00      	subs	r3, #0
 8000fa8:	bf18      	it	ne
 8000faa:	2301      	movne	r3, #1
 8000fac:	0692      	lsls	r2, r2, #26
 8000fae:	d42b      	bmi.n	8001008 <_printf_common+0xb0>
 8000fb0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000fb4:	4641      	mov	r1, r8
 8000fb6:	4638      	mov	r0, r7
 8000fb8:	47c8      	blx	r9
 8000fba:	3001      	adds	r0, #1
 8000fbc:	d01e      	beq.n	8000ffc <_printf_common+0xa4>
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	6922      	ldr	r2, [r4, #16]
 8000fc2:	f003 0306 	and.w	r3, r3, #6
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	bf02      	ittt	eq
 8000fca:	68e5      	ldreq	r5, [r4, #12]
 8000fcc:	6833      	ldreq	r3, [r6, #0]
 8000fce:	1aed      	subeq	r5, r5, r3
 8000fd0:	68a3      	ldr	r3, [r4, #8]
 8000fd2:	bf0c      	ite	eq
 8000fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000fd8:	2500      	movne	r5, #0
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	bfc4      	itt	gt
 8000fde:	1a9b      	subgt	r3, r3, r2
 8000fe0:	18ed      	addgt	r5, r5, r3
 8000fe2:	2600      	movs	r6, #0
 8000fe4:	341a      	adds	r4, #26
 8000fe6:	42b5      	cmp	r5, r6
 8000fe8:	d11a      	bne.n	8001020 <_printf_common+0xc8>
 8000fea:	2000      	movs	r0, #0
 8000fec:	e008      	b.n	8001000 <_printf_common+0xa8>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	4652      	mov	r2, sl
 8000ff2:	4641      	mov	r1, r8
 8000ff4:	4638      	mov	r0, r7
 8000ff6:	47c8      	blx	r9
 8000ff8:	3001      	adds	r0, #1
 8000ffa:	d103      	bne.n	8001004 <_printf_common+0xac>
 8000ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8001000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001004:	3501      	adds	r5, #1
 8001006:	e7c6      	b.n	8000f96 <_printf_common+0x3e>
 8001008:	18e1      	adds	r1, r4, r3
 800100a:	1c5a      	adds	r2, r3, #1
 800100c:	2030      	movs	r0, #48	@ 0x30
 800100e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001012:	4422      	add	r2, r4
 8001014:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001018:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800101c:	3302      	adds	r3, #2
 800101e:	e7c7      	b.n	8000fb0 <_printf_common+0x58>
 8001020:	2301      	movs	r3, #1
 8001022:	4622      	mov	r2, r4
 8001024:	4641      	mov	r1, r8
 8001026:	4638      	mov	r0, r7
 8001028:	47c8      	blx	r9
 800102a:	3001      	adds	r0, #1
 800102c:	d0e6      	beq.n	8000ffc <_printf_common+0xa4>
 800102e:	3601      	adds	r6, #1
 8001030:	e7d9      	b.n	8000fe6 <_printf_common+0x8e>
	...

08001034 <_printf_i>:
 8001034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001038:	7e0f      	ldrb	r7, [r1, #24]
 800103a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800103c:	2f78      	cmp	r7, #120	@ 0x78
 800103e:	4691      	mov	r9, r2
 8001040:	4680      	mov	r8, r0
 8001042:	460c      	mov	r4, r1
 8001044:	469a      	mov	sl, r3
 8001046:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800104a:	d807      	bhi.n	800105c <_printf_i+0x28>
 800104c:	2f62      	cmp	r7, #98	@ 0x62
 800104e:	d80a      	bhi.n	8001066 <_printf_i+0x32>
 8001050:	2f00      	cmp	r7, #0
 8001052:	f000 80d2 	beq.w	80011fa <_printf_i+0x1c6>
 8001056:	2f58      	cmp	r7, #88	@ 0x58
 8001058:	f000 80b9 	beq.w	80011ce <_printf_i+0x19a>
 800105c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001060:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001064:	e03a      	b.n	80010dc <_printf_i+0xa8>
 8001066:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800106a:	2b15      	cmp	r3, #21
 800106c:	d8f6      	bhi.n	800105c <_printf_i+0x28>
 800106e:	a101      	add	r1, pc, #4	@ (adr r1, 8001074 <_printf_i+0x40>)
 8001070:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001074:	080010cd 	.word	0x080010cd
 8001078:	080010e1 	.word	0x080010e1
 800107c:	0800105d 	.word	0x0800105d
 8001080:	0800105d 	.word	0x0800105d
 8001084:	0800105d 	.word	0x0800105d
 8001088:	0800105d 	.word	0x0800105d
 800108c:	080010e1 	.word	0x080010e1
 8001090:	0800105d 	.word	0x0800105d
 8001094:	0800105d 	.word	0x0800105d
 8001098:	0800105d 	.word	0x0800105d
 800109c:	0800105d 	.word	0x0800105d
 80010a0:	080011e1 	.word	0x080011e1
 80010a4:	0800110b 	.word	0x0800110b
 80010a8:	0800119b 	.word	0x0800119b
 80010ac:	0800105d 	.word	0x0800105d
 80010b0:	0800105d 	.word	0x0800105d
 80010b4:	08001203 	.word	0x08001203
 80010b8:	0800105d 	.word	0x0800105d
 80010bc:	0800110b 	.word	0x0800110b
 80010c0:	0800105d 	.word	0x0800105d
 80010c4:	0800105d 	.word	0x0800105d
 80010c8:	080011a3 	.word	0x080011a3
 80010cc:	6833      	ldr	r3, [r6, #0]
 80010ce:	1d1a      	adds	r2, r3, #4
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6032      	str	r2, [r6, #0]
 80010d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80010d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80010dc:	2301      	movs	r3, #1
 80010de:	e09d      	b.n	800121c <_printf_i+0x1e8>
 80010e0:	6833      	ldr	r3, [r6, #0]
 80010e2:	6820      	ldr	r0, [r4, #0]
 80010e4:	1d19      	adds	r1, r3, #4
 80010e6:	6031      	str	r1, [r6, #0]
 80010e8:	0606      	lsls	r6, r0, #24
 80010ea:	d501      	bpl.n	80010f0 <_printf_i+0xbc>
 80010ec:	681d      	ldr	r5, [r3, #0]
 80010ee:	e003      	b.n	80010f8 <_printf_i+0xc4>
 80010f0:	0645      	lsls	r5, r0, #25
 80010f2:	d5fb      	bpl.n	80010ec <_printf_i+0xb8>
 80010f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80010f8:	2d00      	cmp	r5, #0
 80010fa:	da03      	bge.n	8001104 <_printf_i+0xd0>
 80010fc:	232d      	movs	r3, #45	@ 0x2d
 80010fe:	426d      	negs	r5, r5
 8001100:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001104:	4859      	ldr	r0, [pc, #356]	@ (800126c <_printf_i+0x238>)
 8001106:	230a      	movs	r3, #10
 8001108:	e011      	b.n	800112e <_printf_i+0xfa>
 800110a:	6821      	ldr	r1, [r4, #0]
 800110c:	6833      	ldr	r3, [r6, #0]
 800110e:	0608      	lsls	r0, r1, #24
 8001110:	f853 5b04 	ldr.w	r5, [r3], #4
 8001114:	d402      	bmi.n	800111c <_printf_i+0xe8>
 8001116:	0649      	lsls	r1, r1, #25
 8001118:	bf48      	it	mi
 800111a:	b2ad      	uxthmi	r5, r5
 800111c:	2f6f      	cmp	r7, #111	@ 0x6f
 800111e:	4853      	ldr	r0, [pc, #332]	@ (800126c <_printf_i+0x238>)
 8001120:	6033      	str	r3, [r6, #0]
 8001122:	bf14      	ite	ne
 8001124:	230a      	movne	r3, #10
 8001126:	2308      	moveq	r3, #8
 8001128:	2100      	movs	r1, #0
 800112a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800112e:	6866      	ldr	r6, [r4, #4]
 8001130:	60a6      	str	r6, [r4, #8]
 8001132:	2e00      	cmp	r6, #0
 8001134:	bfa2      	ittt	ge
 8001136:	6821      	ldrge	r1, [r4, #0]
 8001138:	f021 0104 	bicge.w	r1, r1, #4
 800113c:	6021      	strge	r1, [r4, #0]
 800113e:	b90d      	cbnz	r5, 8001144 <_printf_i+0x110>
 8001140:	2e00      	cmp	r6, #0
 8001142:	d04b      	beq.n	80011dc <_printf_i+0x1a8>
 8001144:	4616      	mov	r6, r2
 8001146:	fbb5 f1f3 	udiv	r1, r5, r3
 800114a:	fb03 5711 	mls	r7, r3, r1, r5
 800114e:	5dc7      	ldrb	r7, [r0, r7]
 8001150:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001154:	462f      	mov	r7, r5
 8001156:	42bb      	cmp	r3, r7
 8001158:	460d      	mov	r5, r1
 800115a:	d9f4      	bls.n	8001146 <_printf_i+0x112>
 800115c:	2b08      	cmp	r3, #8
 800115e:	d10b      	bne.n	8001178 <_printf_i+0x144>
 8001160:	6823      	ldr	r3, [r4, #0]
 8001162:	07df      	lsls	r7, r3, #31
 8001164:	d508      	bpl.n	8001178 <_printf_i+0x144>
 8001166:	6923      	ldr	r3, [r4, #16]
 8001168:	6861      	ldr	r1, [r4, #4]
 800116a:	4299      	cmp	r1, r3
 800116c:	bfde      	ittt	le
 800116e:	2330      	movle	r3, #48	@ 0x30
 8001170:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001174:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001178:	1b92      	subs	r2, r2, r6
 800117a:	6122      	str	r2, [r4, #16]
 800117c:	f8cd a000 	str.w	sl, [sp]
 8001180:	464b      	mov	r3, r9
 8001182:	aa03      	add	r2, sp, #12
 8001184:	4621      	mov	r1, r4
 8001186:	4640      	mov	r0, r8
 8001188:	f7ff fee6 	bl	8000f58 <_printf_common>
 800118c:	3001      	adds	r0, #1
 800118e:	d14a      	bne.n	8001226 <_printf_i+0x1f2>
 8001190:	f04f 30ff 	mov.w	r0, #4294967295
 8001194:	b004      	add	sp, #16
 8001196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800119a:	6823      	ldr	r3, [r4, #0]
 800119c:	f043 0320 	orr.w	r3, r3, #32
 80011a0:	6023      	str	r3, [r4, #0]
 80011a2:	4833      	ldr	r0, [pc, #204]	@ (8001270 <_printf_i+0x23c>)
 80011a4:	2778      	movs	r7, #120	@ 0x78
 80011a6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80011aa:	6823      	ldr	r3, [r4, #0]
 80011ac:	6831      	ldr	r1, [r6, #0]
 80011ae:	061f      	lsls	r7, r3, #24
 80011b0:	f851 5b04 	ldr.w	r5, [r1], #4
 80011b4:	d402      	bmi.n	80011bc <_printf_i+0x188>
 80011b6:	065f      	lsls	r7, r3, #25
 80011b8:	bf48      	it	mi
 80011ba:	b2ad      	uxthmi	r5, r5
 80011bc:	6031      	str	r1, [r6, #0]
 80011be:	07d9      	lsls	r1, r3, #31
 80011c0:	bf44      	itt	mi
 80011c2:	f043 0320 	orrmi.w	r3, r3, #32
 80011c6:	6023      	strmi	r3, [r4, #0]
 80011c8:	b11d      	cbz	r5, 80011d2 <_printf_i+0x19e>
 80011ca:	2310      	movs	r3, #16
 80011cc:	e7ac      	b.n	8001128 <_printf_i+0xf4>
 80011ce:	4827      	ldr	r0, [pc, #156]	@ (800126c <_printf_i+0x238>)
 80011d0:	e7e9      	b.n	80011a6 <_printf_i+0x172>
 80011d2:	6823      	ldr	r3, [r4, #0]
 80011d4:	f023 0320 	bic.w	r3, r3, #32
 80011d8:	6023      	str	r3, [r4, #0]
 80011da:	e7f6      	b.n	80011ca <_printf_i+0x196>
 80011dc:	4616      	mov	r6, r2
 80011de:	e7bd      	b.n	800115c <_printf_i+0x128>
 80011e0:	6833      	ldr	r3, [r6, #0]
 80011e2:	6825      	ldr	r5, [r4, #0]
 80011e4:	6961      	ldr	r1, [r4, #20]
 80011e6:	1d18      	adds	r0, r3, #4
 80011e8:	6030      	str	r0, [r6, #0]
 80011ea:	062e      	lsls	r6, r5, #24
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	d501      	bpl.n	80011f4 <_printf_i+0x1c0>
 80011f0:	6019      	str	r1, [r3, #0]
 80011f2:	e002      	b.n	80011fa <_printf_i+0x1c6>
 80011f4:	0668      	lsls	r0, r5, #25
 80011f6:	d5fb      	bpl.n	80011f0 <_printf_i+0x1bc>
 80011f8:	8019      	strh	r1, [r3, #0]
 80011fa:	2300      	movs	r3, #0
 80011fc:	6123      	str	r3, [r4, #16]
 80011fe:	4616      	mov	r6, r2
 8001200:	e7bc      	b.n	800117c <_printf_i+0x148>
 8001202:	6833      	ldr	r3, [r6, #0]
 8001204:	1d1a      	adds	r2, r3, #4
 8001206:	6032      	str	r2, [r6, #0]
 8001208:	681e      	ldr	r6, [r3, #0]
 800120a:	6862      	ldr	r2, [r4, #4]
 800120c:	2100      	movs	r1, #0
 800120e:	4630      	mov	r0, r6
 8001210:	f7fe ffde 	bl	80001d0 <memchr>
 8001214:	b108      	cbz	r0, 800121a <_printf_i+0x1e6>
 8001216:	1b80      	subs	r0, r0, r6
 8001218:	6060      	str	r0, [r4, #4]
 800121a:	6863      	ldr	r3, [r4, #4]
 800121c:	6123      	str	r3, [r4, #16]
 800121e:	2300      	movs	r3, #0
 8001220:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001224:	e7aa      	b.n	800117c <_printf_i+0x148>
 8001226:	6923      	ldr	r3, [r4, #16]
 8001228:	4632      	mov	r2, r6
 800122a:	4649      	mov	r1, r9
 800122c:	4640      	mov	r0, r8
 800122e:	47d0      	blx	sl
 8001230:	3001      	adds	r0, #1
 8001232:	d0ad      	beq.n	8001190 <_printf_i+0x15c>
 8001234:	6823      	ldr	r3, [r4, #0]
 8001236:	079b      	lsls	r3, r3, #30
 8001238:	d413      	bmi.n	8001262 <_printf_i+0x22e>
 800123a:	68e0      	ldr	r0, [r4, #12]
 800123c:	9b03      	ldr	r3, [sp, #12]
 800123e:	4298      	cmp	r0, r3
 8001240:	bfb8      	it	lt
 8001242:	4618      	movlt	r0, r3
 8001244:	e7a6      	b.n	8001194 <_printf_i+0x160>
 8001246:	2301      	movs	r3, #1
 8001248:	4632      	mov	r2, r6
 800124a:	4649      	mov	r1, r9
 800124c:	4640      	mov	r0, r8
 800124e:	47d0      	blx	sl
 8001250:	3001      	adds	r0, #1
 8001252:	d09d      	beq.n	8001190 <_printf_i+0x15c>
 8001254:	3501      	adds	r5, #1
 8001256:	68e3      	ldr	r3, [r4, #12]
 8001258:	9903      	ldr	r1, [sp, #12]
 800125a:	1a5b      	subs	r3, r3, r1
 800125c:	42ab      	cmp	r3, r5
 800125e:	dcf2      	bgt.n	8001246 <_printf_i+0x212>
 8001260:	e7eb      	b.n	800123a <_printf_i+0x206>
 8001262:	2500      	movs	r5, #0
 8001264:	f104 0619 	add.w	r6, r4, #25
 8001268:	e7f5      	b.n	8001256 <_printf_i+0x222>
 800126a:	bf00      	nop
 800126c:	0800159b 	.word	0x0800159b
 8001270:	080015ac 	.word	0x080015ac

08001274 <__sflush_r>:
 8001274:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800127a:	0716      	lsls	r6, r2, #28
 800127c:	4605      	mov	r5, r0
 800127e:	460c      	mov	r4, r1
 8001280:	d454      	bmi.n	800132c <__sflush_r+0xb8>
 8001282:	684b      	ldr	r3, [r1, #4]
 8001284:	2b00      	cmp	r3, #0
 8001286:	dc02      	bgt.n	800128e <__sflush_r+0x1a>
 8001288:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800128a:	2b00      	cmp	r3, #0
 800128c:	dd48      	ble.n	8001320 <__sflush_r+0xac>
 800128e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001290:	2e00      	cmp	r6, #0
 8001292:	d045      	beq.n	8001320 <__sflush_r+0xac>
 8001294:	2300      	movs	r3, #0
 8001296:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800129a:	682f      	ldr	r7, [r5, #0]
 800129c:	6a21      	ldr	r1, [r4, #32]
 800129e:	602b      	str	r3, [r5, #0]
 80012a0:	d030      	beq.n	8001304 <__sflush_r+0x90>
 80012a2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80012a4:	89a3      	ldrh	r3, [r4, #12]
 80012a6:	0759      	lsls	r1, r3, #29
 80012a8:	d505      	bpl.n	80012b6 <__sflush_r+0x42>
 80012aa:	6863      	ldr	r3, [r4, #4]
 80012ac:	1ad2      	subs	r2, r2, r3
 80012ae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80012b0:	b10b      	cbz	r3, 80012b6 <__sflush_r+0x42>
 80012b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80012b4:	1ad2      	subs	r2, r2, r3
 80012b6:	2300      	movs	r3, #0
 80012b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80012ba:	6a21      	ldr	r1, [r4, #32]
 80012bc:	4628      	mov	r0, r5
 80012be:	47b0      	blx	r6
 80012c0:	1c43      	adds	r3, r0, #1
 80012c2:	89a3      	ldrh	r3, [r4, #12]
 80012c4:	d106      	bne.n	80012d4 <__sflush_r+0x60>
 80012c6:	6829      	ldr	r1, [r5, #0]
 80012c8:	291d      	cmp	r1, #29
 80012ca:	d82b      	bhi.n	8001324 <__sflush_r+0xb0>
 80012cc:	4a28      	ldr	r2, [pc, #160]	@ (8001370 <__sflush_r+0xfc>)
 80012ce:	410a      	asrs	r2, r1
 80012d0:	07d6      	lsls	r6, r2, #31
 80012d2:	d427      	bmi.n	8001324 <__sflush_r+0xb0>
 80012d4:	2200      	movs	r2, #0
 80012d6:	6062      	str	r2, [r4, #4]
 80012d8:	04d9      	lsls	r1, r3, #19
 80012da:	6922      	ldr	r2, [r4, #16]
 80012dc:	6022      	str	r2, [r4, #0]
 80012de:	d504      	bpl.n	80012ea <__sflush_r+0x76>
 80012e0:	1c42      	adds	r2, r0, #1
 80012e2:	d101      	bne.n	80012e8 <__sflush_r+0x74>
 80012e4:	682b      	ldr	r3, [r5, #0]
 80012e6:	b903      	cbnz	r3, 80012ea <__sflush_r+0x76>
 80012e8:	6560      	str	r0, [r4, #84]	@ 0x54
 80012ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80012ec:	602f      	str	r7, [r5, #0]
 80012ee:	b1b9      	cbz	r1, 8001320 <__sflush_r+0xac>
 80012f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80012f4:	4299      	cmp	r1, r3
 80012f6:	d002      	beq.n	80012fe <__sflush_r+0x8a>
 80012f8:	4628      	mov	r0, r5
 80012fa:	f7ff fbf5 	bl	8000ae8 <_free_r>
 80012fe:	2300      	movs	r3, #0
 8001300:	6363      	str	r3, [r4, #52]	@ 0x34
 8001302:	e00d      	b.n	8001320 <__sflush_r+0xac>
 8001304:	2301      	movs	r3, #1
 8001306:	4628      	mov	r0, r5
 8001308:	47b0      	blx	r6
 800130a:	4602      	mov	r2, r0
 800130c:	1c50      	adds	r0, r2, #1
 800130e:	d1c9      	bne.n	80012a4 <__sflush_r+0x30>
 8001310:	682b      	ldr	r3, [r5, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0c6      	beq.n	80012a4 <__sflush_r+0x30>
 8001316:	2b1d      	cmp	r3, #29
 8001318:	d001      	beq.n	800131e <__sflush_r+0xaa>
 800131a:	2b16      	cmp	r3, #22
 800131c:	d11d      	bne.n	800135a <__sflush_r+0xe6>
 800131e:	602f      	str	r7, [r5, #0]
 8001320:	2000      	movs	r0, #0
 8001322:	e021      	b.n	8001368 <__sflush_r+0xf4>
 8001324:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001328:	b21b      	sxth	r3, r3
 800132a:	e01a      	b.n	8001362 <__sflush_r+0xee>
 800132c:	690f      	ldr	r7, [r1, #16]
 800132e:	2f00      	cmp	r7, #0
 8001330:	d0f6      	beq.n	8001320 <__sflush_r+0xac>
 8001332:	0793      	lsls	r3, r2, #30
 8001334:	680e      	ldr	r6, [r1, #0]
 8001336:	bf08      	it	eq
 8001338:	694b      	ldreq	r3, [r1, #20]
 800133a:	600f      	str	r7, [r1, #0]
 800133c:	bf18      	it	ne
 800133e:	2300      	movne	r3, #0
 8001340:	1bf6      	subs	r6, r6, r7
 8001342:	608b      	str	r3, [r1, #8]
 8001344:	2e00      	cmp	r6, #0
 8001346:	ddeb      	ble.n	8001320 <__sflush_r+0xac>
 8001348:	6a21      	ldr	r1, [r4, #32]
 800134a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800134e:	4633      	mov	r3, r6
 8001350:	463a      	mov	r2, r7
 8001352:	4628      	mov	r0, r5
 8001354:	47e0      	blx	ip
 8001356:	2800      	cmp	r0, #0
 8001358:	dc07      	bgt.n	800136a <__sflush_r+0xf6>
 800135a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800135e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001362:	81a3      	strh	r3, [r4, #12]
 8001364:	f04f 30ff 	mov.w	r0, #4294967295
 8001368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800136a:	4407      	add	r7, r0
 800136c:	1a36      	subs	r6, r6, r0
 800136e:	e7e9      	b.n	8001344 <__sflush_r+0xd0>
 8001370:	dfbffffe 	.word	0xdfbffffe

08001374 <_fflush_r>:
 8001374:	b538      	push	{r3, r4, r5, lr}
 8001376:	690b      	ldr	r3, [r1, #16]
 8001378:	4605      	mov	r5, r0
 800137a:	460c      	mov	r4, r1
 800137c:	b913      	cbnz	r3, 8001384 <_fflush_r+0x10>
 800137e:	2500      	movs	r5, #0
 8001380:	4628      	mov	r0, r5
 8001382:	bd38      	pop	{r3, r4, r5, pc}
 8001384:	b118      	cbz	r0, 800138e <_fflush_r+0x1a>
 8001386:	6a03      	ldr	r3, [r0, #32]
 8001388:	b90b      	cbnz	r3, 800138e <_fflush_r+0x1a>
 800138a:	f7ff f9b3 	bl	80006f4 <__sinit>
 800138e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f3      	beq.n	800137e <_fflush_r+0xa>
 8001396:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001398:	07d0      	lsls	r0, r2, #31
 800139a:	d404      	bmi.n	80013a6 <_fflush_r+0x32>
 800139c:	0599      	lsls	r1, r3, #22
 800139e:	d402      	bmi.n	80013a6 <_fflush_r+0x32>
 80013a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013a2:	f7ff fb9e 	bl	8000ae2 <__retarget_lock_acquire_recursive>
 80013a6:	4628      	mov	r0, r5
 80013a8:	4621      	mov	r1, r4
 80013aa:	f7ff ff63 	bl	8001274 <__sflush_r>
 80013ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80013b0:	07da      	lsls	r2, r3, #31
 80013b2:	4605      	mov	r5, r0
 80013b4:	d4e4      	bmi.n	8001380 <_fflush_r+0xc>
 80013b6:	89a3      	ldrh	r3, [r4, #12]
 80013b8:	059b      	lsls	r3, r3, #22
 80013ba:	d4e1      	bmi.n	8001380 <_fflush_r+0xc>
 80013bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80013be:	f7ff fb91 	bl	8000ae4 <__retarget_lock_release_recursive>
 80013c2:	e7dd      	b.n	8001380 <_fflush_r+0xc>

080013c4 <__swhatbuf_r>:
 80013c4:	b570      	push	{r4, r5, r6, lr}
 80013c6:	460c      	mov	r4, r1
 80013c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013cc:	2900      	cmp	r1, #0
 80013ce:	b096      	sub	sp, #88	@ 0x58
 80013d0:	4615      	mov	r5, r2
 80013d2:	461e      	mov	r6, r3
 80013d4:	da0d      	bge.n	80013f2 <__swhatbuf_r+0x2e>
 80013d6:	89a3      	ldrh	r3, [r4, #12]
 80013d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80013dc:	f04f 0100 	mov.w	r1, #0
 80013e0:	bf14      	ite	ne
 80013e2:	2340      	movne	r3, #64	@ 0x40
 80013e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80013e8:	2000      	movs	r0, #0
 80013ea:	6031      	str	r1, [r6, #0]
 80013ec:	602b      	str	r3, [r5, #0]
 80013ee:	b016      	add	sp, #88	@ 0x58
 80013f0:	bd70      	pop	{r4, r5, r6, pc}
 80013f2:	466a      	mov	r2, sp
 80013f4:	f000 f848 	bl	8001488 <_fstat_r>
 80013f8:	2800      	cmp	r0, #0
 80013fa:	dbec      	blt.n	80013d6 <__swhatbuf_r+0x12>
 80013fc:	9901      	ldr	r1, [sp, #4]
 80013fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001402:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001406:	4259      	negs	r1, r3
 8001408:	4159      	adcs	r1, r3
 800140a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800140e:	e7eb      	b.n	80013e8 <__swhatbuf_r+0x24>

08001410 <__smakebuf_r>:
 8001410:	898b      	ldrh	r3, [r1, #12]
 8001412:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001414:	079d      	lsls	r5, r3, #30
 8001416:	4606      	mov	r6, r0
 8001418:	460c      	mov	r4, r1
 800141a:	d507      	bpl.n	800142c <__smakebuf_r+0x1c>
 800141c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001420:	6023      	str	r3, [r4, #0]
 8001422:	6123      	str	r3, [r4, #16]
 8001424:	2301      	movs	r3, #1
 8001426:	6163      	str	r3, [r4, #20]
 8001428:	b003      	add	sp, #12
 800142a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800142c:	ab01      	add	r3, sp, #4
 800142e:	466a      	mov	r2, sp
 8001430:	f7ff ffc8 	bl	80013c4 <__swhatbuf_r>
 8001434:	9f00      	ldr	r7, [sp, #0]
 8001436:	4605      	mov	r5, r0
 8001438:	4639      	mov	r1, r7
 800143a:	4630      	mov	r0, r6
 800143c:	f7ff fbc0 	bl	8000bc0 <_malloc_r>
 8001440:	b948      	cbnz	r0, 8001456 <__smakebuf_r+0x46>
 8001442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001446:	059a      	lsls	r2, r3, #22
 8001448:	d4ee      	bmi.n	8001428 <__smakebuf_r+0x18>
 800144a:	f023 0303 	bic.w	r3, r3, #3
 800144e:	f043 0302 	orr.w	r3, r3, #2
 8001452:	81a3      	strh	r3, [r4, #12]
 8001454:	e7e2      	b.n	800141c <__smakebuf_r+0xc>
 8001456:	89a3      	ldrh	r3, [r4, #12]
 8001458:	6020      	str	r0, [r4, #0]
 800145a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800145e:	81a3      	strh	r3, [r4, #12]
 8001460:	9b01      	ldr	r3, [sp, #4]
 8001462:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001466:	b15b      	cbz	r3, 8001480 <__smakebuf_r+0x70>
 8001468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800146c:	4630      	mov	r0, r6
 800146e:	f000 f81d 	bl	80014ac <_isatty_r>
 8001472:	b128      	cbz	r0, 8001480 <__smakebuf_r+0x70>
 8001474:	89a3      	ldrh	r3, [r4, #12]
 8001476:	f023 0303 	bic.w	r3, r3, #3
 800147a:	f043 0301 	orr.w	r3, r3, #1
 800147e:	81a3      	strh	r3, [r4, #12]
 8001480:	89a3      	ldrh	r3, [r4, #12]
 8001482:	431d      	orrs	r5, r3
 8001484:	81a5      	strh	r5, [r4, #12]
 8001486:	e7cf      	b.n	8001428 <__smakebuf_r+0x18>

08001488 <_fstat_r>:
 8001488:	b538      	push	{r3, r4, r5, lr}
 800148a:	4d07      	ldr	r5, [pc, #28]	@ (80014a8 <_fstat_r+0x20>)
 800148c:	2300      	movs	r3, #0
 800148e:	4604      	mov	r4, r0
 8001490:	4608      	mov	r0, r1
 8001492:	4611      	mov	r1, r2
 8001494:	602b      	str	r3, [r5, #0]
 8001496:	f7ff f81b 	bl	80004d0 <_fstat>
 800149a:	1c43      	adds	r3, r0, #1
 800149c:	d102      	bne.n	80014a4 <_fstat_r+0x1c>
 800149e:	682b      	ldr	r3, [r5, #0]
 80014a0:	b103      	cbz	r3, 80014a4 <_fstat_r+0x1c>
 80014a2:	6023      	str	r3, [r4, #0]
 80014a4:	bd38      	pop	{r3, r4, r5, pc}
 80014a6:	bf00      	nop
 80014a8:	200001b8 	.word	0x200001b8

080014ac <_isatty_r>:
 80014ac:	b538      	push	{r3, r4, r5, lr}
 80014ae:	4d06      	ldr	r5, [pc, #24]	@ (80014c8 <_isatty_r+0x1c>)
 80014b0:	2300      	movs	r3, #0
 80014b2:	4604      	mov	r4, r0
 80014b4:	4608      	mov	r0, r1
 80014b6:	602b      	str	r3, [r5, #0]
 80014b8:	f7ff f819 	bl	80004ee <_isatty>
 80014bc:	1c43      	adds	r3, r0, #1
 80014be:	d102      	bne.n	80014c6 <_isatty_r+0x1a>
 80014c0:	682b      	ldr	r3, [r5, #0]
 80014c2:	b103      	cbz	r3, 80014c6 <_isatty_r+0x1a>
 80014c4:	6023      	str	r3, [r4, #0]
 80014c6:	bd38      	pop	{r3, r4, r5, pc}
 80014c8:	200001b8 	.word	0x200001b8

080014cc <_sbrk_r>:
 80014cc:	b538      	push	{r3, r4, r5, lr}
 80014ce:	4d06      	ldr	r5, [pc, #24]	@ (80014e8 <_sbrk_r+0x1c>)
 80014d0:	2300      	movs	r3, #0
 80014d2:	4604      	mov	r4, r0
 80014d4:	4608      	mov	r0, r1
 80014d6:	602b      	str	r3, [r5, #0]
 80014d8:	f7ff f820 	bl	800051c <_sbrk>
 80014dc:	1c43      	adds	r3, r0, #1
 80014de:	d102      	bne.n	80014e6 <_sbrk_r+0x1a>
 80014e0:	682b      	ldr	r3, [r5, #0]
 80014e2:	b103      	cbz	r3, 80014e6 <_sbrk_r+0x1a>
 80014e4:	6023      	str	r3, [r4, #0]
 80014e6:	bd38      	pop	{r3, r4, r5, pc}
 80014e8:	200001b8 	.word	0x200001b8

080014ec <_init>:
 80014ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ee:	bf00      	nop
 80014f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014f2:	bc08      	pop	{r3}
 80014f4:	469e      	mov	lr, r3
 80014f6:	4770      	bx	lr

080014f8 <_fini>:
 80014f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014fa:	bf00      	nop
 80014fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014fe:	bc08      	pop	{r3}
 8001500:	469e      	mov	lr, r3
 8001502:	4770      	bx	lr
