/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include <stdio.h>

// 1. write a main() function where should execute the SVC instruction with an argument.
// let say SVC #05
// 2. implement the SVC handler
// 3. in the SVC handler extract the SVC number and print it using printf
// 4. increment the SVC number by 4 and return it to the thread mode



__attribute__ ((naked)) void SVC_Handler(void)
{
	// 1. get the value of the MSP, no inbuilt C function for this
	// because want to access some special register of the processor
	__asm("MRS R0,MSP");
	// when branch to this function then r0 will be used as the 1st argument for the function
	// due to procedure call standard for ARM architecture
	__asm("B SVC_Handler_C");
}

// get name from startup file
void SVC_Handler_C(uint32_t *pBaseOfStackFrame)
{
	printf("in SVC handler\n");
	// incrementing the pointer by 6 to get PC (dereferenced already)
	// so get the actual return address
	uint8_t *pReturn_addr = (uint8_t*)pBaseOfStackFrame[6];

	// 2. decrement the return address by 2 to point to opcode of the
	// SVC instruction in the program memory
	pReturn_addr -= 2;

	// 3. extract the SVC number (LSB of the opcode)
	// SVC number is the least significant byte
	uint8_t svc_number = *pReturn_addr;
	printf("SVC number is : %d\n", svc_number);
}

int main(void)
{
	// this causes SVC exception
    __asm("SVC #8");
	for(;;);
}
