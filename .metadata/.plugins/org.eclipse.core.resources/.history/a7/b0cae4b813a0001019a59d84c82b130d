/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include <stdio.h>

int main(void)
{
    // 1. enable all configurable exceptions like usage fault, mem manage, and bus fault
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;

	*pSHCSR |= (1 << 16); // mem manage
	*pSHCSR |= (1 << 17); // bus fault
	*pSHCSR |= (1 << 18); // usage fault

	// 3. lets force the processor to execute some invalid instructions
	// this is some random memory location in the SRAM
	uint32_t *pSRAM = (uint32_t*)0x20010000;
	// in this SRAM location going to store some invalid instruction let say 0xffffffff
	*pSRAM = 0xFFFFFFFF;
	// then create some function pointer to
	void (*some_address) (void);
	// initialize the function pointer to this address, where we stored some invalid code
	// or some invalid data, consider this as an opcode for instruction, but that opcode
	// is invalid
	// need to typecast it to a number and add 1 because T-bit need to be 1, so function address
	// needs to be odd
	some_address = (void*)0x20010000;
	// then dereference it, this is how jump to the 0x20010000, or make PC load this location
	// in this location store invalid opcode
	// this opcode will be fetched and will be fed to the instruction decoder of the processor
	// and the decoder when decodes it finds that it's an invalid opcode and the fault will
	// be generated
	some_address();

	// 4. analyze the fault
	for(;;);
}

// 2. implement the fault handlers, can get from startup code
void HardFault_Handler(void)
{
	printf("Exception : Hardfault\n");
	while(1);
}
void MemManage_Handler(void)
{
	printf("Exception : MemManage\n");
	while(1);
}
void BusFault_Handler(void)
{
	printf("Exception : BusFault\n");
	while(1);
}
void UsageFault_Handler(void)
{
	uint32_t *pUFSR = (uint32_t*)0xE000ED2A;
	printf("Exception : UsageFault\n");
	// & 0xFFFF so that only using the first 16 bits
	printf("UFSR = %lx\n", (*pUFSR) & 0xFFFF);
	while(1);
}
