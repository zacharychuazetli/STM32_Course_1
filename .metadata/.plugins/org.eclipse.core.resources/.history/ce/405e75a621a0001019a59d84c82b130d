/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include <stdio.h>

void UsageFault_Handler_C(uint32_t *pBaseStackFrame);

int fun_divide(int x, int y)
{
	return x/y;
}

int main(void)
{
    // 1. enable all configurable exceptions like usage fault, mem manage, and bus fault
	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;

	*pSHCSR |= (1 << 16); // mem manage
	*pSHCSR |= (1 << 17); // bus fault
	*pSHCSR |= (1 << 18); // usage fault

	// 2. enable divide by zero trap
	uint32_t *pCCR = (uint32_t*)0xE000ED14;
	*pCCR |= (1 << 4);


	for(;;);
}

// 2. implement the fault handlers, can get from startup code
void HardFault_Handler(void)
{
	printf("Exception : Hardfault\n");
	while(1);
}
void MemManage_Handler(void)
{
	printf("Exception : MemManage\n");
	while(1);
}
void BusFault_Handler(void)
{
	printf("Exception : BusFault\n");
	while(1);
}

__attribute__ ((naked)) void UsageFault_Handler(void)
{
	// here we extracted the value of MSP which happens to be the
	// base address of the stack frame(thread mode code) which got saved during the
	// exception entry from thread mode to handler mode
	__asm ("MRS r0,MSP");
	// use branch to jump to the C function
	__asm ("B UsageFault_Handler_C");
}

void UsageFault_Handler_C(uint32_t *pBaseStackFrame)
{

	uint32_t *pUFSR = (uint32_t*)0xE000ED2A;
	printf("Exception : UsageFault\n");
	// & 0xFFFF so that only using the first 16 bits
	printf("UFSR = %lx\n", (*pUFSR) & 0xFFFF);
	printf("pBaseStackFrame = %p\n", pBaseStackFrame);
	printf("Value of R0 = %lx\n", pBaseStackFrame[0]);
	printf("Value of R1 = %lx\n", pBaseStackFrame[1]);
	printf("Value of R2 = %lx\n", pBaseStackFrame[2]);
	printf("Value of R3 = %lx\n", pBaseStackFrame[3]);
	printf("Value of R12 = %lx\n", pBaseStackFrame[4]);
	printf("Value of LR = %lx\n", pBaseStackFrame[5]);
	printf("Value of PC = %lx\n", pBaseStackFrame[6]);
	printf("Value of XPSR = %lx\n", pBaseStackFrame[7]);
	while(1);
}
