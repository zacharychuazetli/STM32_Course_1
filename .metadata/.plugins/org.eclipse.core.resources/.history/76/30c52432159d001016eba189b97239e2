/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>

#if 0
#define SRAM_START 0x20000000U
#define SRAM_SIZE (128 * 1024)
#define SRAM_END ((SRAM_START) + (SRAM_SIZE))
#define STACK_START SRAM_END

#define STACK_MSP_START STACK_START
#define STACK_MSP_END (STACK_MSP_START - 512)
#define STACK_PSP_START STACK_MSP_END
#endif

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include <stdio.h>

int fun_add(int a, int b, int c, int d)
{
	return a+b+c+d;
}

// define as naked function because just want to use some assembly instruction
// cannot write as a C function
// naked function means tell compiler to leave the body exactly as i write it
__attribute__((naked)) void change_sp_to_psp(void)
{
	__asm volatile(".equ SRAM_END, ( 0x20000000 + (128 * 1024))");
	__asm volatile(".equ PSP_START, (SRAM_END-512)");

	// to initialize PSP to the start of stack for PSP
	__asm volatile("LDR R0,=PSP_START");
	__asm volatile("MSR PSP, R0");

	// use control register to change SP to PSP, set first bit to 1
	// use MOV instruction, but MOV only can take in 16 bit value
	// so must use immediate value of 16 bit
	__asm volatile("MOV R0,#0x02");
	__asm volatile("MSR CONTROL,R0");
}

// will cause some exception
void generate_exception(void)
{
	// using SVC instruction to trigger the SVC exception
	// it is one of the exception of the ARM Cortex Mx processor, cover later
	// SVC instruction can be executed by thread mode code to get some services from
	// kernel level code, it is basically used in an OS environment
	// where the application involves separate kernel and user code
	// SVC is the instruction which is used to implement the system call layer
	// when thread mode code execute this, SVC exception will be triggered in the processor
	// and SVC exception handler will be called
	// name of SVC_Handler can get from the startup file, name is SVC_Handler
	__asm volatile("SVC #0x2");
}

void SVC_Handler(void)
{
	printf(" in SVC_Handler\n");
}

int main(void)
{
	change_sp_to_psp();

	int ret;

	ret = fun_add(1, 4, 5, 6);

	printf("result = %d\n", ret);

	generate_exception();

	for(;;);
}
